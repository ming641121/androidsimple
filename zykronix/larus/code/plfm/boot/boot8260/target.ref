\" ads827x/target.nr - Motorola MPC827XADS target specific documentation
\"
\" Copyright 1984-2003 Wind River Systems, Inc.
\"
\" modification history
\" --------------------
\" 01a,18dec03,dtr  Adapted from ADS826x BSP target.nr
\"
\TITLE ads827x - Motorola MPC827XADS

NAME
`Motorola ADS827X - HIP7'

INTRODUCTION
This reference entry provides board-specific information necessary to run
VxWorks for the ads8272 BSP.

The BSP will work with the rev PROTOTYPE of the ADS8272 board.

Board Switch Settings
The board must have the switch and jumpers set to appropriate values before
software can be loaded into the memory, or before flash memory can be programmed
as described below.

   1. Setting the board Jumpers & Switches:
   In order to get the board running with the default configuration, the
   switches can be set as follows:

   NOTE:  The MODCK and MODCKH switches affect the hard reset configuration word
          that the processor reads during hard reset time.  The bsp reads internal
          SIU registers and obtains all the necessary pll multiplier and divider
          values to self configure the clock, CPM and baudrate clocks.  The following
          settings for MODCK and MODCKH are the default values as specified in
          the board manual.  The user is free to pick and choose any acceptable
          combination of these values that will allow the core frequencies to not
          exceed the allowable ranges as described in the MCP8260 manual.

\ts
  Dip SW1 | Dip SW2 |  Dip SW4 | 
-  |  |  |  |  |  |  |  | 
  SWOPT0 ON | Reserved ON | MODCKH0 OFF | 
  SWOPT1 ON | PCI DLL OFF | MODCKH1 ON | 
  SWOPT2 ON | PCI Arbiter ON | MODCKH2 OFF | 
  Reserved ON | BOOT SOURCE ON | MODCKH3 ON | 
   |  |  | PCIMODCK ON | 
   |  |  | MODCK1 ON | 
   |  |  | MODCK2 OFF | 
 |  |  | MODCK3 OFF | 

\te

        Jumper JP9 2-3  BCSR is hard reset word source (factory default)

BOOT ROMS
No VxWorks Boot ROM is provided with this BSP release. Nevertheless VxWorks
boot code is working if downloaded into the SIMM Flash ROM.

VxWorks boot code can be programmed in to Flash using one of the following
methods:

\sh 

\sh Using visionProbe with visionClick or WIND POWER IDE
1. Setting the board Jumpers & Switches:
   In order to get the board running with the default configuration, the
   switches need to be set as follows:

2. Creating a bootrom_uncmp.hex:
   2.1 Launch Tornado II, go to the "Build" menu and choose the option
       "Build Boot ROM...".
   2.2 The "Build Boot ROM" window will popup,
       in the "Select a BSP:" column choose the "ads827x", and
       in the "Select an Image to build:" column, choose
       "bootrom_uncmp.hex" and compiler of choice, and press the "OK"
       button.
   2.3 Once the build process finish successfully (You will see "Done"
       in the "Build window" without error), you will find the file
       "bootrom_uncmp.hex" in the BSP directory
       "$(WIND_BASE)/target/config/ads827x".

3. Programming bootrom_uncmp to the MPC8272ADS FLASH:
   Support for Hip 7 part is available in visionClick 7.11.10 and also in WIND POWER IDE 1.2 
   3.1 Using visionCLICK:

   3.1.1 Connect the JTAG interface cable from the visionPROBE II or
         visionICE II into the MPC8272ADS board JTAG (P21 The
         JTAG/COP Port) connector, and power it on.

         Once all the connections have been made, power up the
         MPC8272ADS board and start visionCLICK on the host.
	
   3.1.2 Configure the visionCLICK project:
         The "Welcome To visionCLICK" window will appear.  In this
         window press on the "Configure" button, this will invoke
         the "PROJECTS/LOAD" window.  In this window press on
         the '+' left of the "PowerPC_C_Demo@0x00800400.prj"
         project to expand the project which will show you the
         current project configuration.

         Point with the mouse cursor on the "Microprocessors" option
         and right-click to choose "PowerPC->MPC82xx->MPC8275"

         Verify that the "Target Control" option points to
         visionPROBE for visionPROBE II, or visionICE for
         visionICE II.

         Switch to the "Communications" TAB and verify that the
         "Normal Port/Rate" & "Download Port/Rate" is set to the
         correct LPT port if you are using visionPROBE II or enter
         the emulator IP address if you are using visionICE

         Save the project by clicking the "Save" button at the
         bottom of the window. Click the "Activate" button to send
         the project configuration to the attached hardware
         debugger.

   3.1.3 Program visionPROBE II / visionICE II with the proper
         register setting for the MPC8272ADS board:
	 The register file is delivered for this board with the BSP.

         Go to the "Tools" menu and select the "Log Output/Playback
         Scripts" option. The "Record / Playback" dialog box will
         popup.  Go to the "Playback Commands From File"
         group and click the "Browse" button.  Navigate to the
         location of the register file: "ads8272.vsh".  After
         choosing the register file press on the "Open" button to
         confirm the selected reg file.  This will return you back
     	 to the "Record / Playback" dialog box.  Click the "Start"
	 button located in the same group.  In the "Terminal" window
	 you can see that visionCLICK is running the script.
	 When the script is finished running, you will get
	 back the ">BKM>" or the ">ERR>" prompt.

   3.1.4 Get into Background Mode:
         At the "Terminal" window, execute the "IN" command to reset
         the board and initialize it with the register settings.

	 >ERR>IN
	 ***********************************************************
	 VisionICE II Initialization Sequence.  Copyright WIND RIVER
	 Corp. 2002
	 ***********************************************************
	 Support Expires..... 1/12/03 Target Processor..... MPC8275
	 VisionICE II             Group ID#= 0
	 VisionICE II    Serial#= N2201100    Firmware=vn2.0a
	 Type CF for a Menu of Configuration Options Using
	 Front PANEL as BDM source
	 Initializing Background Debug Mode..............Successful
	 >BKM>

	 If initialize properly, you should see >BKM> prompt at the
	 terminal window as shown above.

	 Ensure that the register file have been loaded to both
	 the emulator and the target.  Verfiy the values for "OR0",
	 "BR0", "OR2" and "BR2" shown in the Register window under
	 "MEMC" group matches the target.  To find out a register
	 value in the target, in "Terminal" windows, type "DR
	 name_of_register".  For e.g.

	 >BKM>DR OR0
			
	 The proper values are:
		OR0 = FF800876 
		BR0 = FF801801  
		OR1 = FFFF8010 
		BR1 = 04501801 
		OR2 = FF002CC0 
		BR2 = 00000041 

    3.1.5 Setting the Flash Chip Select:
         3.1.5.1 Once the ">BKM>" prompt appears we need to verify
          	 that the Flash chip select configuration is
             	 correct. To do this, type "CS" at the >BKM>
		 prompt in the "Terminal" window and press Enter.
             	 The first line ("CS0") is for the Flash chip
             	 select.  Under the "PS" (for Port Size) column for
             	 CS0, check that the number is "32".

		 If configured properly, goto Section 3.1.6.
		 If not configured properly, follow the steps below
		 to change it:

         3.1.5.2 Type "CS CS0" in the "Terminal" window and press
                 Enter.

                 >BKM>CS CS0

         3.1.5.3 Press enter until you get the following line:

                 (0-3) = 64, 8, 16, 32 bits  |  Port Size=32 Bits >

		 Enter 3 for "32" bits and keep pressing Enter until
                 you get to the ">BKM>" prompt again.

         3.1.5.4 Once the prompt appears, reset the board and the
        	 emulator with the following command:

                 >BKM>IN

                 After you get the ">BKM>" prompt, continue with the
                 instructions in the next section.

     3.1.6 Converting bootrom_uncmp.hex to bootrom_uncmp.bin:
          3.1.6.1 In visionCLICK, choose "Convert Object Modules"
              	  from the "Tools" menu.  The "CONVERT BINARY AND
              	  SYMBOL OBJs" window will appear.  Go to the
             	  "Select Input Object Module To Convert"
                  group and navigate to the file "bootrom_uncmp.hex"
                  located in "$(WIND_BASE)/target/config/ads827x

          3.1.6.2 In the group "Binary Downloadable Objects Modules"
              	  check the "Create Flat BIN File For Flash
              	  Programming".  "In Range Of 0x" edit box, enter
              	  "0" for the start address, and in the "To 0x" edit
              	  box, enter "FFFFFFFF".

          3.1.6.3 Make sure that none of the other check boxes are
                  checked.  Press the "Convert" button. Close the
                  terminal window when the conversion completes.

     3.1.7 Programming the MPC8272 Flash:
           In visionCLICK, select "Program Flash Devices" from the
           Tools pull-down menu and this will invoke the "TF FLASH
           PROGRAMMING" window.
          3.1.7.1 Click the "Select" in the "Flash Card or PC Host
            	  File Name and Path" group.  The "CHOOSE A FILE FROM
             	  HOST PC" window will appear.  In the edit box enter
             	  the full path of the file "bootrom_uncmp.bin", or
             	  use the "<--Browse" button to navigate to the file.

                  Go to the "+/- Bias" group and enter "FFF00000" in
             	  the edit box. Click the "OK" button. This will
             	  bring you back to the "TF FLASH PROGRAMMING"
             	  window.

           3.1.7.2 In the "Programming Algorithm" group, click the
	           "Select" button, and select the following Flash
		   devices:

		   "Intel 28F016/16S (2048 x 8) 4 Devices"

           3.1.7.3 Set the base address of the Flash to "FFF00000",
	           check the "Erase All" radio button.
		
		   Set the start address of "Available RAM Workspace"
		   to "00005000" with the "Bytes Of Target RAM Required"
		   set to "5000".

           3.1.7.4 Press the "Erase and Program" button.

           3.1.7.5 Now the Flash memory is programmed with the new
                   boot program.



\sh Jumpers on PROTOTYPE board revision


The baud rate generator assumes a 100 MHz system clock and a
CPM multiplication factor of 2. Although the PROTOTYPE board
supports reading the Hard Reset Configuration Word from Flash
or from the BCSR, the currently shipping PROTOTYPE Board has a
processor XPC8260 rev. 0.2, which does not support reading
the Flash at Power-on or Hard reset and so must be set to
use BCSR. 

FEATURES

\sh Supported Features (PROTOTYPE board revisions)

SCC1 and SCC4 as a UART

FCC1 FCC2 as an Ethernet device supporting 10BaseT and 100BaseT protocol

Interrupt Controller

System Clock

Baud Rate Generators as required for SCC1 and SCC4

64MB on board SDRAM

DMA as required only for SCC1, SCC4, FCC1 & FCC2

Auxiliary clock and timestamp clock

8 MByte Flash module (16 and 32 MByte configurations have not been tested)

Flash read and write capability

Instruction and Data caches

On-chip PCI bridge for 82xx chips.

PCI Bridge Direct DMA 

PCI Error Handling 

\sh Unsupported Features (PROTOTYPE board revisions)

virtual DMA

Parallel Ports

Baud Rate Generators not used by supported devices

SPI

Reset capability or options

SCC1 and SCC4 in any mode other than UART

SCC2 and SCC3

ATM, Transparent, or HDLC protocols on FCC1 and FCC2

FCC3

MCC1 and MCC2

SMC1 or SMC2

USB 

Any of the eight TDM interfaces

Support for the two 96 DIN connectors
(Voyager Tools Board connector and Expansion connector)
which bring out all pins on the MPC8272 chip

\sh Feature Interactions
None known

HARDWARE DETAILS
This section documents the details of the device drivers and board
hardware elements.

\sh Devices
The chip drivers included are:

    m8260Flash.c - flash memory driver
    m8260Sio.c - serial driver
    m8260IntrCtl.c - interrupt controller driver
    m8260Timer.c - timer driver
    motFccEnd.c - FCC Ethernet END driver
    miiLib.c - Media Independent Interface library
    mot82xxPci.c - On-chip PCI Bridge library/interrupt handler.

The BSP configures both SCC1 and SCC4 as UART devices.
SCC1 is used as a console device.
FCC1/2 are used as ethernet ports.

\sh Memory Maps

The memory map is described in the Motorola board documentation.  The
memory map is completely configurable by the bsp, however we have
kept the map as described.  However there is a remapping of the IMMR
(internal memory map register) provided.  During debugging it can be
desireable to leave the internal memory map as defined by the hard
reset configuration word.  This makes using a visionICE or visionPROBE
simpler because the emulator always knows where the internal map is.

The bsp defaults to leaving the memory map as defined by the hard
reset config word.  If you want to map it to the value as described in
the board manual, simply define IMMAP_REMAP in config.h.



The following table describes the ads8260 default memory map:
\ts


Start | Size | End | Access to
------------------------------
0x0000_0000 | 16MB | 0x03FF_FFFF | Soldered SDRAM 
0x0440_0000 | 1MB | 0x044F_FFFF | Unused
0x0450_0000 | 32KB | 0x0450_7FFF | Board Control and Status Registers
 | | | (BCSR0 through BCSR7 on PROTOTYPE revision)
0x0450_8000 |  | 0x045F_FFFF | Unused
0x0460_0000 | 32KB | 0x0460_7FFF | ATM (unsupported)
0x0460_8000 |  | 0x046F_FFFF | Unused
0x0470_0000 | 64KB | 0x0471_FFFF | MPC 8260 Internal Memory
 | | | (see MPC8260 PowerQUICC II User's Manual,
 | | | Chapter 3, Memory Map, and
 | | | Chapter 13, CPM Overview, for further details,
 | | | and see Parameter Ram below)
0x0472_0000 |  | 0xFCFF_FFFF | Unused
0xFF80_0000 | 8MB | 0xFFFF_FFFF | Flash SIMM
\te






The following table describes the default VxWorks macros which
are used to address memory
\ts


Macro Name | Macro Definition | Description
------------------------------
LOCAL_MEM_LOCAL_ADRS | 0x0000_0000 | Base of RAM
RAM_LOW_ADRS | LOCAL_MEM_LOCAL_ADRS + 0x0001_0000
 | VxWorks image loaded here. Stack grows down from this address.
RAM_HIGH_ADRS | LOCAL_MEM_LOCAL_ADRS + 0x00d0_0000
 | VxWorks bootrom loaded here.
LOCAL_MEM_SIZE | 0100_0000 | Default 16 MBytes of RAM
BCSR_BASE_ADRS | 0450_0000 | Default location of Board Control and Status Registers on PROTOTYPE rev
BCSRS_SIZE | 0001_0000 | 64 KBytes on PROTOTYPE rev
DEFAULT_IMM_ADRS | 0F00_0000 | Default location of MPC 8260 Internal Memory Map
DEFAULT_IMM_ADRS | 0470_0000 | Remapped location of MPC 8260 Internal Memory Map
IMM_SIZE | 0x20000 | 128K Internal Memory Map Size
ROM_BASE_ADRS | 0xFFF0_0000 | Base address of ROM on PROTOTYPE rev
ROM_TEXT_ADRS | ROM_BASE_ADRS + 0x100
 | Text must start after vector table
ROM_WARM_ADRS | ROM_TEXT_ADRS + 8
 | Warm Reboot Entry Address
ROM_SIZE | 0x0010_0000 | Default 1 MByte of ROM on PROTOTYPE rev (see ROM considerations)
\te


\sh Shared Memory
NA

\sh PCI Support


The support include PCI DMA and PCI Error Handling.
The standard mapping for PCI is described in config.h of this BSP and uses
outbound translation to access. This means PCI space usage is configurable by
the user in config.h.
INCLUDE_PCI_DMA intialises the interrupt and handlers for PCI Bridge DMA
INCLUDE_PCI_ERROR_HANDLING intialises the interrupt and handlers for PCI
Bridge Error handling interrupts and a show routine (pciErrorShow) detailing
which errors have occured and how many.


\sh Interrupts


The following table describes the relationship between the interrupt
number, interrupt vector, and the interrupt bit position in the SIU
Interrupt Mask Register (SIMR_H and SIMR_L). Also described is the
mask to use to enable all interrupts of a higher priority. See m8260IntrCtl.c
for usage. This is compatible with previous 8260 parts. 
\ts
Default |  |  |  | Mask to Enable|
Interrupt | Interrupt | Interrupt | SIMR | Higher Priority Interrupts | Interrupt
Priority | Number | Vector | Mask | SIMR_H | SIMR_L | Source
 |  |  |  |  |  | HIGHEST PRIORITY
1 | 16 | 0x10 | H 0x00000004 | 0000_0000 | 0000_0000 | TMCNT
2 | 16 | 0x10 | H 0x00000004 | 0000_0000 | 0000_0000 | TMCNT
3 | 17 | 0x11 | H 0x00000002 | 0000_0004 | 0000_0000 | PIT
4 | 18 | 0x12 | H 0x00000001 | 0000_0006 | 0000_0000 | PCI
5 | 19 | 0x13 | H 0x00004000 | 0000_0006 | 0000_0000 | IRQ1
6 | 27 | 0x20 | L 0x80000000 | 0000_4006 | 0000_0000 | FCC1
7 | 28 | 0x21 | L 0x40000000 | 0000_4006 | 8000_0000 | FCC2
8 | 29 | 0x22 | L 0x20000000 | 0000_4006 | C000_0000 | FCC3
9 | inactive
10 | unused
11 | 31 | 0x24 | L 0x08000000 | 0000_4006 | E000_0000 | MCC1
12 | 32 | 0x25 | L 0x04000000 | 0000_4006 | E800_0000 | MCC2
13 | inactive
14 | inactive
15 | 20 | 0x13 | H 0x00002000 | 0000_4006 | EC00_0000 | IRQ2
16 | 21 | 0x14 | H 0x00001000 | 0000_6006 | EC00_0000 | IRQ3
17 | 22 | 0x15 | H 0x00000800 | 0000_7006 | EC00_0000 | IRQ4
18 | 23 | 0x16 | H 0x00000400 | 0000_7806 | EC00_0000 | IRQ5
19 | unused
20 | 35 | 0x28 | L 0x00800000 | 0000_7C06 | EC00_0000 | SCC1
21 | 36 | 0x29 | L 0x00400000 | 0000_7C06 | EC80_0000 | SCC2
22 | 37 | 0x2A | L 0x00200000 | 0000_7C06 | ECC0_0000 | SCC3
23 | 38 | 0x2B | L 0x00100000 | 0000_7C06 | ECE0_0000 | SCC4
24 | inactive
25 | inactive
26 | inactive
27 | inactive
28 | unused
29 | 40 | 0x30 | H 0x00010000 | 0000_7C06 | ECF0_0000 | PC15
30 | 12 | 0x0C | L 0x00000010 | 0001_7C06 | ECF0_0000 | Timer 1
31 | 41 | 0x31 | H 0x00020000 | 0001_7C06 | ECF0_0010 | PC14
32 | unused
33 | 42 | 0x32 | H 0x00040000 | 0003_7C06 | ECF0_0010 | PC13
34 | 10 | 0x0A | L 0x00000040 | 0007_7C06 | ECF0_0010 | SDMA Bus Error
35 | 6 | 0x06 | L 0x00000400 | 0007_7C06 | ECF0_0050 | IDMA1
36 | unused
37 | 43 | 0x33 | H 0x00080000 | 0007_7C06 | ECF0_0450 | PC12
38 | 44 | 0x34 | H 0x00100000 | 000F_7C06 | ECF0_0450 | PC11
39 | 7 | 0x07 | L 0x00000200 | 001F_7C06 | ECF0_0450 | IDMA2
40 | 13 | 0x0D | L 0x00000008 | 001F_7C06 | ECF0_0650 | Timer 2
41 | 45 | 0x35 | H 0x00200000 | 001F_7C06 | ECF0_0658 | PC10
42 | unused
43 | unused
44 | 3 | 0x03 | L 0x00002000 | 003F_7C06 | ECF0_0658 | RISC Timer Table
45 | 1 | 0x01 | L 0x00008000 | 003F_7C06 | ECF0_2658 | I2C
46 | unused
47 | 46 | 0x36 | H 0x00400000 | 003F_7C06 | ECF0_A658 | PC9
48 | 47 | 0x37 | H 0x00800000 | 007F_7C06 | ECF0_A658 | PC8
49 | 24 | 0x18 | H 0x00000200 | 00FF_7C06 | ECF0_A658 | IRQ6
50 | 8 | 0x08 | L 0x00000100 | 00FF_7E06 | ECF0_A658 | IDMA3
51 | 25 | 0x19 | H 0x00000100 | 00FF_7E06 | ECF0_A758 | IRQ7
52 | 14 | 0x0E | L 0x00000004 | 00FF_7F06 | ECF0_A758 | Timer 3
53 | unused
54 | unused
55 | 48 | 0x38 | H 0x01000000 | 00FF_7F06 | ECF0_A75C | PC7
56 | 49 | 0x39 | H 0x02000000 | 01FF_7F06 | ECF0_A75C | PC6
57 | 50 | 0x3A | H 0x04000000 | 03FF_7F06 | ECF0_A75C | PC5
58 | 15 | 0x0F | L 0x00000002 | 07FF_7F06 | ECF0_A75C | Timer 4
59 | unused
60 | 51 | 0x3B | H 0x08000000 | 07FF_7F06 | ECF0_A75E | PC4
61 | unused
62 | 9 | 0x09 | L 0x00000080 | 0FFF_7F06 | ECF0_A75E | IDMA4
63 | 2 | 0x02 | L 0x00004000 | 0FFF_7F06 | ECF0_A7DE | SPI
64 | 52 | 0x3C | H 0x10000000 | 0FFF_7F06 | ECF0_E7DE | PC3
65 | 53 | 0x3D | H 0x20000000 | 1FFF_7F06 | ECF0_E7DE | PC2
66 | 4 | 0x04 | L 0x00001000 | 3FFF_7F06 | ECF0_E7DE | SMC1
67 | unused
68 | 5 | 0x05 | L 0x00000800 | 3FFF_7F06 | ECF0_F7DE | SMC2
69 | 54 | 0x3E | H 0x40000000 | 3FFF_7F06 | ECF0_FFDE | PC1
70 | 55 | 0x3F | H 0x80000000 | 7FFF_7F06 | ECF0_FFDE | PC0
71 | unused
72 | unused
73 | reserved
 |  |  |  |  |  | LOWEST PRIORITY

\te

\sh Serial Configuration
SCC1 and SCC4 are configured as UART devices with 8 data bits, 1 stop
bit, hardware handshaking, and parity disabled.

\sh SCSI Configuration
There is no SCSI interface on this board.

\sh Network Configuration
FCC1 and FCC2 is configured as an Ethernet port

\sh VME Access
NA

\sh PCI Access
PCI interface is available.

\sh Boot Devices
motfcc

\sh Boot Methods
Ethernet

SPECIAL CONSIDERATIONS
This section describes miscellaneous information that the user needs
to know about the BSP.

\sh Delivered Objects

\sh Make Targets
Bootrom_uncmp, vxWorks and vxWorks.st are delivered. All other
make targets are untested. For PROTOTYPE revision of board, bootrom
(compressed) is also tested.

\sh Special Routines
None

\sh Serial Connections
Most VxWorks BSPs do not use hardware handshaking in the serial
interface, and thus a simple 3 wire connection is commonly used.  The
MPC8260 ADS BSP does use hardware handshaking and this requires
a full 8 pin interface. Standard molded RS-232 cables have been shown
to work, possibly requiring a null modem adapter.

See also "Known Problems" below.

\sh Ethernet Address
The MPC82xx ADS boards do not have a unique Ethernet hardware
address assigned to each board.  A unique address is absolutely necessary if
the user wishes to connect the board to a network.  Thus, the user
must provide a suitable 6 byte Ethernet address for each board used
on a network.  The address is programmed by changing the sysFccEnetAddr
character array in the file sysLib.c.  The first three bytes (0x08, 0x00, 0x3e)
are a Motorola-specific prefix that should be kept as-is.  The user must
change the last three bytes from 0x03, 0x02, 0x01 to three unique bytes
(i.e., bytes not used by any other Motorola Ethernet connection on your net).
Check with your system administrator if you do not know this information.

\sh Known Problems
vxWorks does not implement support of critical/machine check exceptions.

\sh SYSCLK Frequency
Most Motorola sample code and documentation refers to a default system clock
frequency of 100 MHz

BOARD LAYOUT
The diagram below shows jumpers and connectors relevant to
VxWorks configuration for ADS8272 PROTOTYPE revision of the board.

\bs
___________________________________________________________________________
|  	                   SW3/6/7 Reset/Power   SW5 - Modck              |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
| P23 - FETH 2 (FCC2)        P21 - COP/JTAG                               |
|                                                                         |
|                                                                         |
|                                                                         |
|                                         SW2 - PCI/Boot Source           |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
| P13 - Serial SCC1 & 4                                                   |
|       Top SCC1/RS232-1                                                  |
|       Bottom SCC4/RS232-2                                               |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
| P10 - FETH 1 (FCC1)                                                     |
|                                                                         |
|                                                                         |
|                                                                         |
|                                                                         |
|                            -------------                        ________|
|     P4 - CPM expansion     |            |  P16 - SYS expansion  |
|____________________________|            |_______________________|
\be
    Key:
    X  vertical jumper installed
    :  vertical jumper absent
    -  horizontal jumper installed
    "  horizontal jumper absent
    0  switch off
    1  switch on
    U  three-pin vertical jumper, upper jumper installed
    D  three-pin vertical jumper, lower jumper installed
    L  three-pin horizontal jumper, left jumper installed
    R  three-pin horizontal jumper, right jumper installed

SEE ALSO
\tb Tornado User's Guide: Getting Started, 
\tb VxWorks Programmer's Guide: Configuration, 
\tb VxWorks Programmer's Guide: Architecture Appendix 

BIBLIOGRAPHY

\tb MPC8272 Reference Manual 
\tb MPC8272ADS Board Manual 
.IB "MPC8266ADS-PCI User's Manual"
\tb MPC826x PowerQUICC II Errata 
\tb MPC8260 ADS User's Manual 
\tb MPC8260ADS User's Manual, for PILOT revision bd, 11/1999 
\tb PowerQUICC II User's Manual, rev. 0 
\tb MPC8260 PowerQUICC II User's Manual Errata, rev. 0 
\tb MPC8260 Design Checklist 
\tb PowerPC Microprocessor Family: The Programming Environments for 32-bit Microprocessors MPCFPE32B/AD 
\tb MPC603e & EC603e RISC Microprocessors User's Manual MPC603EUM/AD 
\tb VBUG PowerQUICC II Debugger 


WEB RESOURCES

Much of the Motorola documentation can be found on line. The following
URL was correct at the time of writing for semiconductor area. You'll have to search the documentation using processor name for specific documentation.

http://e-www.motorola.com/


