/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


#include "sr_conf.h"

#include <stdio.h>


#include <string.h>


#include "sr_snmp.h"
#include "comunity.h"
#include "v2clssc.h"
#include "sr_trans.h"
#include "context.h"
#include "method.h"
#include "mibout.h"


#define SEND_MESSAGE(A,B) printf("%s\n%s\n\n", A, B)
int sent = 0;


int
#ifndef PER_FILE_INIT
k_initialize()
#else /* PER_FILE_INIT */
k_note_initialize()
#endif /* PER_FILE_INIT */
{
    return 1;
}

int
#ifndef PER_FILE_INIT
k_terminate()
#else /* PER_FILE_INIT */
k_note_terminate()
#endif /* PER_FILE_INIT */
{
    return 1;
}

note_t *
k_note_get(serialNum, contextInfo, nominator)
   int serialNum;
   ContextInfo *contextInfo;
   int nominator;
{
   static note_t noteData;

   if (nominator == I_noteRecipient) {
       return NULL;
   }

   if (nominator == I_noteBody) {
       return NULL;
   }

   noteData.noteNumber = sent;
   SET_VALID(I_noteNumber, noteData.valid);
   return(&noteData);
}

#ifdef SETS
int
k_note_test(object, value, dp, contextInfo)
    ObjectInfo     *object;
    ObjectSyntax   *value;
    doList_t       *dp;
    ContextInfo    *contextInfo;
{
    return NO_ERROR;
}

int
k_note_ready(object, value, doHead, dp)
    ObjectInfo     *object;
    ObjectSyntax   *value;
    doList_t       *doHead;
    doList_t       *dp;
{
    if (VALID(I_noteRecipient, ((note_t *) dp->data)->valid) &&
	VALID(I_noteBody, ((note_t *) dp->data)->valid)) {
	dp->state = SR_ADD_MODIFY;
    }
    else {
	dp->state = SR_UNKNOWN;
    }
    return NO_ERROR;
}

int
k_note_set(data, contextInfo, function)
   note_t *data;
   ContextInfo *contextInfo;
   int function;
{
   char temp1[135];
   char temp2[265];

   /*
    * There is no need to store the objects in memory permanently,
    * just send the message.
    */

   strcpy(temp1, "To: ");
   strncat(temp1, (char *)data->noteRecipient->octet_ptr, data->noteRecipient->length);
   strcpy(temp2, "Message: ");
   strncat(temp2, (char *)data->noteBody->octet_ptr, data->noteBody->length);
   SEND_MESSAGE(temp1, temp2);
   sent++;
   return NO_ERROR;
}

#endif /* SETS */

