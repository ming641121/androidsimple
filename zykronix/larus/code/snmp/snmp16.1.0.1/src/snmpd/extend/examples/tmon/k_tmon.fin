/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


#include "sr_conf.h"

#include <stdio.h>
#include <string.h>
#include "sr_snmp.h"
#include "comunity.h"
#include "v2clssc.h"
#include "sr_trans.h"
#include "context.h"
#include "method.h"
#include "mibout.h"
#include "trap.h"

static trapMonitor_t trapMonitorData;

void tmon_do_trap(
    SR_INT32 genTrap,
    SR_INT32 specTrap,
    VarBind *vb_list,
    OID *enterprise,
    char *entV2Trap);

int k_tmon_initialize(void);

void
tmon_do_trap(genTrap, specTrap, vb_list, enterprise, entV2Trap)
    SR_INT32        genTrap;
    SR_INT32        specTrap;
    VarBind        *vb_list;
    OID            *enterprise;
    char           *entV2Trap;
{
    SR_UINT32       value[1];
    OID             subidentifier;
    OID            *temp;

    if (trapMonitorData.tmonLastSentTrap != NULL) {
	FreeOID(trapMonitorData.tmonLastSentTrap);
    }
    if (entV2Trap != NULL) {
	trapMonitorData.tmonLastSentTrap = MakeOIDFromDot(entV2Trap);
    }
    else {
	subidentifier.length = 1;
	subidentifier.oid_ptr = value;
	value[0] = 0;
	temp = CatOID(enterprise, &subidentifier);
	value[0] = specTrap;
	trapMonitorData.tmonLastSentTrap = CatOID(temp, &subidentifier);
	FreeOID(temp);
    }
    do_trap(genTrap, specTrap, vb_list, enterprise, entV2Trap);
}

int
k_tmon_initialize()
{
    OID *tmon_enterprise;

    tmon_enterprise = MakeOIDFromDot("1.3.6.1.4.1.99.12.19.1.1.1.3.1");
    tmon_do_trap((SR_INT32)6, (SR_INT32)0, (VarBind *) NULL, tmon_enterprise,
	"1.3.6.1.4.1.99.12.19.1.1.1.3.1.2");
    FreeOID(tmon_enterprise);

    return 1;
}

#ifndef PER_FILE_INIT
int
k_initialize()
{
   return 1;
}
#endif /* PER_FILE_INIT */

int
#ifndef PER_FILE_INIT
k_terminate()
#else /* PER_FILE_INIT */
k_tmon_terminate()
#endif /* PER_FILE_INIT */
{
   return 1;
}

trapMonitor_t *
k_trapMonitor_get(serialNum, contextInfo, nominator)
   int serialNum;
   ContextInfo *contextInfo;
   int nominator;
{
    if (trapMonitorData.tmonLastSentTrap != NULL) {
	SET_ALL_VALID(trapMonitorData.valid);
	return(&trapMonitorData);
    }
    else {
	return(NULL);
    }
}

