/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


#include "sr_conf.h"

#include <stdio.h>
#include <string.h>
#include "sr_snmp.h"
#include "comunity.h"
#include "v2clssc.h"
#include "sr_trans.h"
#include "context.h"
#include "method.h"
#include "mibout.h"


#ifdef CELSIUS
#define THERMOSTAT_UNITS D_thstUnits_celsius
#define COMFORTABLE 21
#else /* FAHRENHEIT */
#define THERMOSTAT_UNITS D_thstUnits_fahrenheit
#define COMFORTABLE 70
#endif /* FAHRENHEIT */

/*
 * This variable is accessible to external thermostat
 * instrumentation routines and is volatile
 */
thermostat_t thermostatData;


int
#ifndef PER_FILE_INIT
k_initialize()
#else /* PER_FILE_INIT */
k_thst_initialize()
#endif /* PER_FILE_INIT */
{
    thermostatData.thstTemperature = COMFORTABLE;
    thermostatData.thstUnits = THERMOSTAT_UNITS;
    SET_ALL_VALID(thermostatData.valid);
    return 1;
}

int
#ifndef PER_FILE_INIT
k_terminate()
#else /* PER_FILE_INIT */
k_thst_terminate()
#endif /* PER_FILE_INIT */
{
    return 1;
}

thermostat_t *
k_thermostat_get(serialNum, contextInfo, nominator)
   int serialNum;
   ContextInfo *contextInfo;
   int nominator;
{
    return(&thermostatData);
}

int
k_thermostat_test(object, value, dp, contextInfo)
    ObjectInfo     *object;
    ObjectSyntax   *value;
    doList_t       *dp;
    ContextInfo    *contextInfo;
{
    return NO_ERROR;
}

int
k_thermostat_ready(object, value, doHead, dp)
    ObjectInfo     *object;
    ObjectSyntax   *value;
    doList_t       *doHead;
    doList_t       *dp;
{
    if (((thermostat_t *) dp->data)->thstUnits == D_thstUnits_celsius) {
	if (((thermostat_t *) dp->data)->thstTemperature < -273) {
	    dp->state = SR_UNKNOWN;
	}
	else {
	    dp->state = SR_ADD_MODIFY;
	}
    }
    else /* D_thstUnits_fahrenheit */ {
	if (((thermostat_t *) dp->data)->thstTemperature < -460) {
	    dp->state = SR_UNKNOWN;
	}
	else {
	    dp->state = SR_ADD_MODIFY;
	}
    }
    return NO_ERROR;
}

int
k_thermostat_set(data, contextInfo, function)
   thermostat_t *data;
   ContextInfo *contextInfo;
   int function;
{
    if (VALID(I_thstTemperature, data->valid)) {
	thermostatData.thstTemperature = data->thstTemperature;
    }
    if (VALID(I_thstUnits, data->valid)) {
	thermostatData.thstUnits = data->thstUnits;
    }
    return NO_ERROR;
}

int
thermostat_undo(doHead, doCur, contextInfo)
    doList_t       *doHead;
    doList_t       *doCur;
    ContextInfo    *contextInfo;
{
    return k_thermostat_set((thermostat_t *) doCur->undodata,
			    contextInfo, SR_ADD_MODIFY);
}

