/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * The following definition allows the finished method routine for
 * the vcrGeneral group of scalar objects to exist in this file;
 * the stub function in k_vcr.stb is renamed to k_vcrGeneral_stub().
 */
#define k_vcrGeneral_get k_vcrGeneral_stub


/*  
 * The following definition renames the automatically generated
 * (completely functional) method routines for the vcrProgramTable.
 * Wrapper functions around these method routines exist in this file.
 *
 * Ifdefs are placed here which match the ifdefs that are automatically
 * generated by postmosy.
 */
#if (defined(SR_CONFIG_FP) && defined(SETS))
#define k_vcrProgramEntry_set k_vcrProgramEntry_real_set
#ifdef SR_vcrProgramEntry_UNDO
#define vcrProgramEntry_undo vcrProgramEntry_real_undo
#endif /* SR_vcrProgramEntry_UNDO */
#endif	/* (defined(SR_CONFIG_FP) && defined(SETS)) */


/*
 * The following definition changes the converter functions
 * in the initializer for the PARSER_CONVERTER structure.  This
 * allows the vcrProgramStartTime and vcrProgramStopTime objects
 * to be quoted text string in the configuration file.
 */
#define ConvToken_octetString ConvToken_textOctetString


/*
 * Include the automatically generated (completely functional)
 * method routines.
 */
#include "k_vcr.stb"


/*
 * Undefine all of the custom definitions.
 */
#undef ConvToken_octetString
#undef k_vcrGeneral_get
#if (defined(SR_CONFIG_FP) && defined(SETS))
#undef k_vcrProgramEntry_set
#ifdef SR_vcrProgramEntry_UNDO
#undef vcrProgramEntry_undo
#endif /* SR_vcrProgramEntry_UNDO */
#endif	/* (defined(SR_CONFIG_FP) && defined(SETS)) */


/*
 * These are pseudo functions which represent the internal API to
 * access data located in the vcr circuitry.
 */
#define GET_CHANNEL(X) 6
#define GET_POWER(X) D_vcrPowerState_on


/*
 * The hand-modified get method routine for the vcrGeneral group.
 */
vcrGeneral_t *
k_vcrGeneral_get(int serialNum,
		 ContextInfo * contextInfo,
		 int nominator)
{
   static vcrGeneral_t vcrGeneralData;

   vcrGeneralData.vcrChannel = GET_CHANNEL(0);
   vcrGeneralData.vcrPowerState = GET_POWER(0);
   SET_ALL_VALID(vcrGeneralData.valid);
   return(&vcrGeneralData);
}


/*
 * Wrapper functions around the automatically generated
 * (completely functional) method routines for the vcrProgramTable.
 * The purpose of these functions is to set the write_vcr_file
 * flag whenever data in the table (in RAM) is modified.  This
 * allows the data to be written back to the configuration file.
 *
 * Ifdefs are placed here which match the ifdefs that are automatically
 * generated by postmosy.
 */
#if (defined(SR_CONFIG_FP) && defined(SETS))
int write_vcr_file;

int
k_vcrProgramEntry_set(vcrProgramEntry_t *data,
                      ContextInfo *contextInfo, int function)
{
   write_vcr_file = 1;
   return k_vcrProgramEntry_real_set(data, contextInfo, function);
}

#ifdef SR_vcrProgramEntry_UNDO
int
vcrProgramEntry_undo(doList_t *doHead, doList_t *doCur,
                     ContextInfo *contextInfo)
{
   write_vcr_file = 1;
   return vcrProgramEntry_real_undo(doHead, doCur, contextInfo);
}
#endif /* SR_vcrProgramEntry_UNDO */
#endif	/* (defined(SR_CONFIG_FP) && defined(SETS)) */


