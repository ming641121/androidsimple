/*
 *
 * Copyright (C) 1996-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 *
 */

#include "sr_conf.h"

#include <stdio.h>

#include <string.h>

#include "sr_snmp.h"
#include "comunity.h"
#include "v2clssc.h"
#include "sr_trans.h"
#include "context.h"
#include "method.h"
#include "mibout.h"


#define MAX_ENTRIES 10
static vcrProgramEntry_t vcrProgramEntryData[MAX_ENTRIES];

#define GET_CHANNEL() 6
#define GET_POWER() D_vcrPowerState_on


int
#ifndef PER_FILE_INIT
k_initialize()
#else /* PER_FILE_INIT */
k_vcr_initialize()
#endif /* PER_FILE_INIT */
{
   int i;

   for (i = 0; i < MAX_ENTRIES; i++) {
       vcrProgramEntryData[i].vcrProgramStatus = D_vcrProgramStatus_destroy;
   }
   vcrProgramEntryData[4].vcrProgramTableIndex = 4;
   vcrProgramEntryData[4].vcrProgramChannel = 3;
   vcrProgramEntryData[4].vcrProgramStartTime = MakeOctetStringFromHex("07 D2 01 10 08 00 00 00");
   vcrProgramEntryData[4].vcrProgramStopTime = MakeOctetStringFromHex("07 D2 01 10 09 00 00 00");
   vcrProgramEntryData[4].vcrProgramSpeed = 1;
   vcrProgramEntryData[4].vcrProgramStatus = D_vcrProgramStatus_active;

   return 1;
}

int
#ifndef PER_FILE_INIT
k_terminate()
#else /* PER_FILE_INIT */
k_vcr_terminate()
#endif /* PER_FILE_INIT */
{
   return 1;
}

vcrGeneral_t *
k_vcrGeneral_get(serialNum, contextInfo, nominator)
   int serialNum;
   ContextInfo *contextInfo;
   int nominator;
{
   static vcrGeneral_t vcrGeneralData;

   vcrGeneralData.vcrChannel = GET_CHANNEL();
   vcrGeneralData.vcrPowerState = GET_POWER();
   SET_ALL_VALID(vcrGeneralData.valid);
   return(&vcrGeneralData);
}

vcrProgramEntry_t *
k_vcrProgramEntry_get(serialNum, contextInfo, nominator, searchType, vcrProgramTableIndex)
   int serialNum;
   ContextInfo *contextInfo;
   int nominator;
   int searchType;
   SR_INT32 vcrProgramTableIndex;
{
   int i;

   for (i = vcrProgramTableIndex; i < MAX_ENTRIES; i++) {
       if (vcrProgramEntryData[i].vcrProgramStatus != D_vcrProgramStatus_destroy) {
           break;
       }
   }
   if (searchType == EXACT) {
       if (i != vcrProgramTableIndex) {
           return NULL;
       }
   }
   if (i >= MAX_ENTRIES) {
       return NULL;
   }

   SET_ALL_VALID(vcrProgramEntryData[i].valid);
   return(&vcrProgramEntryData[i]);
}

#ifdef SETS
int
k_vcrProgramEntry_test(object, value, dp, contextInfo)
    ObjectInfo     *object;
    ObjectSyntax   *value;
    doList_t       *dp;
    ContextInfo    *contextInfo;
{
    vcrProgramEntry_t *data = (vcrProgramEntry_t *) (dp->data);

    if (data->vcrProgramTableIndex >= MAX_ENTRIES) {
        return NO_CREATION_ERROR;
    }
    else if (data->vcrProgramTableIndex <= 0) {
        return NO_CREATION_ERROR;
    }
    else {
        return NO_ERROR;
    }
}

int
k_vcrProgramEntry_ready(object, value, doHead, dp)
    ObjectInfo     *object;
    ObjectSyntax   *value;
    doList_t       *doHead;
    doList_t       *dp;
{

    dp->state = SR_ADD_MODIFY;
    return NO_ERROR;
}

int
k_vcrProgramEntry_set_defaults(dp)
    doList_t       *dp;
{
    vcrProgramEntry_t *data = (vcrProgramEntry_t *) (dp->data);

   data->vcrProgramChannel = 6;
   data->vcrProgramStartTime = MakeOctetStringFromText("");
   data->vcrProgramStopTime = MakeOctetStringFromText("");
   data->vcrProgramSpeed = 1;
   data->vcrProgramStatus = D_vcrProgramStatus_active;

   return NO_ERROR;
}

int
k_vcrProgramEntry_set(data, contextInfo, function)
   vcrProgramEntry_t *data;
   ContextInfo *contextInfo;
   int function;
{
   int i = data->vcrProgramTableIndex;

   vcrProgramEntryData[i].vcrProgramTableIndex = i;
   vcrProgramEntryData[i].vcrProgramChannel = data->vcrProgramChannel;
   vcrProgramEntryData[i].vcrProgramStartTime = CloneOctetString(data->vcrProgramStartTime);
   vcrProgramEntryData[i].vcrProgramStopTime = CloneOctetString(data->vcrProgramStopTime);
   vcrProgramEntryData[i].vcrProgramSpeed = data->vcrProgramSpeed;
   vcrProgramEntryData[i].vcrProgramStatus = data->vcrProgramStatus;
   return NO_ERROR;
}
#endif /* SETS */

#ifdef SR_SNMPv2
#ifdef SR_vcrProgramEntry_UNDO
/* add #define SR_vcrProgramEntry_UNDO in sitedefs.h to
 * include the undo routine for the vcrProgramEntry family.
 */
int
vcrProgramEntry_undo(doHead, doCur, contextInfo)
    doList_t       *doHead;
    doList_t       *doCur;
    ContextInfo    *contextInfo;
{
   return UNDO_FAILED_ERROR;
}
#endif /* SR_vcrProgramEntry_UNDO */
#endif /* SR_SNMPv2 */

