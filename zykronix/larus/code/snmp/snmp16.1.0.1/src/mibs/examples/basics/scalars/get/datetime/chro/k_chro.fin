/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


#include "sr_conf.h"

#include <stdio.h>
#include <string.h>
#include "sr_snmp.h"
#include "comunity.h"
#include "v2clssc.h"
#include "sr_trans.h"
#include "context.h"
#include "method.h"
#include "mibout.h"
#include "sr_time.h"


int
#ifndef PER_FILE_INIT
k_initialize()
#else /* PER_FILE_INIT */
k_chro_initialize()
#endif /* PER_FILE_INIT */
{
   return 1;
}

int
#ifndef PER_FILE_INIT
k_terminate()
#else /* PER_FILE_INIT */
k_chro_terminate()
#endif /* PER_FILE_INIT */
{
   return 1;
}

chronometer_t *
k_chronometer_get(serialNum, contextInfo, nominator)
   int serialNum;
   ContextInfo *contextInfo;
   int nominator;
{
   static chronometer_t chronometerData;
   struct tm *tm;
   time_t clock;

   if (chronometerData.chronometerCurrentTime != NULL) {
      FreeOctetString(chronometerData.chronometerCurrentTime);
   }
   time(&clock);
   tm = localtime(&clock);
   chronometerData.chronometerCurrentTime = MakeDateAndTime(tm);
   SET_ALL_VALID(chronometerData.valid);
   return(&chronometerData);
}

