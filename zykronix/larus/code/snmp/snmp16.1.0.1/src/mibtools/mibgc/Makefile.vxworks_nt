
#
#
# Copyright (C) 1992-2003 by SNMP Research, Incorporated.
#
# This software is furnished under a license and may be used and copied
# only in accordance with the terms of such license and with the
# inclusion of the above copyright notice. This software or any other
# copies thereof may not be provided or otherwise made available to any
# other person. No title to and ownership of the software is hereby
# transferred.
#
# The information in this software is subject to change without notice
# and should not be construed as a commitment by SNMP Research, Incorporated.
#
# Restricted Rights Legend:
#  Use, duplication, or disclosure by the Government is subject to
#  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
#  in Technical Data and Computer Software clause at DFARS 252.227-7013;
#  subparagraphs (c)(4) and (d) of the Commercial Computer
#  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
#  clauses in the NASA FAR Supplement and other corresponding
#  governmental regulations.
#
#

#
#                PROPRIETARY NOTICE
#
# This software is an unpublished work subject to a confidentiality agreement
# and is protected by copyright and trade secret law.  Unauthorized copying,
# redistribution or other use of this work is prohibited.
#
# The above notice of copyright on this source code product does not indicate
# any actual or intended publication of such source code.
#
#


TOPDIR     =    ..\..

# 
# Operating System Information
#

MOVE = move
RMDIR = rmdir
RM = del
CP = copy
CAT = type
# PRESERVE is the flag to $(CP) to duplicate the modification time and
# permission modes of the original file or directory.
PRESERVE =

# Extensions to certain kinds of files are set here.
LIBEXT = a
BINEXT =
OBJEXT = o


LIBPRF = lib


 VX_VW_BASE = $(WIND_BASE)\target
VX_HSP_BASE = $(WIND_BASE)\host\$(WIND_HOST_TYPE)

         OS = -DSR_VXWORKS
         os = vxworks_nt

  SR_OSTYPE = -DCPU=4
    OSFLAGS =
    HOST_OS = w32
 EXTRA_DEFS =

         CC = $(VX_HSP_BASE)\bin\ccppc
 DEBUGFLAGS = -g
         LD = $(VX_HSP_BASE)\bin\ldppc -r
         AR = $(VX_HSP_BASE)\bin\arppc
     AROPTS = clr
     RANLIB = $(VX_HSP_BASE)\bin\ranlibppc

    ARC_INC_DIRS = -I$(VX_VW_BASE)\h
IPC_DEFAULT = -DSR_TCP_IPC
IPC_DEFAULT_LIB = tcp


#
# Directories
#


OSBASEDIR =


OSLIBDIR = $(os)$(OSBASEDIR).lib
OSOBJDIR = $(os)$(OSBASEDIR).obj
OSBINDIR = $(os)$(OSBASEDIR).bin

SECUR_DIR = $(TOPDIR)\..\basic

LIBDIR      = $(SECUR_DIR)\$(OSLIBDIR)
BINDIR      = $(SECUR_DIR)\$(OSBINDIR)
INSTALLDIR  = $(SECUR_DIR)\$(OSBINDIR)
MIBS_DIR    = $(TOPDIR)\mibs
RFCS_DIR    = $(TOPDIR)\mibs\rfcs
IANA_DIR    = $(TOPDIR)\mibs\iana
MIBCOMP_DIR = $(SECUR_DIR)\$(HOST_OS).bin


###############################################################################
# fast for all
###############################################################################

# gcc produces a much better MIB compiler
# linux and freebsd are known to have gcc
# any ANSI-compatible C compiler should work

# the "setargv /link" for windows forces * and ? 
# on the command-line to be expanded

# unixware doesn't like *.o, must list each object

fast:
	-mkdir $(BINDIR)
	$(CC) $(OS) -o  mibgc bison.c fast_flex.c
	$(CC) $(OS) -o  mibgp fast_strip.c
	$(MOVE) mibgc$(BINEXT) $(BINDIR)
	$(MOVE) mibgp$(BINEXT) $(BINDIR) 
	-$(RM) bison.$(OBJEXT) fast_flex.$(OBJEXT) fast_strip.$(OBJEXT)  

###############################################################################
# small
###############################################################################

small:
	-mkdir $(BINDIR)
	$(CC) $(OS) -o  mibgc bison.c small_flex.c
	$(CC) $(OS) -o  mibgp small_strip.c
	$(MOVE) mibgc$(BINEXT) $(BINDIR)
	$(MOVE) mibgp$(BINEXT) $(BINDIR) 
	-$(RM) bison.$(OBJEXT) small_flex.$(OBJEXT) small_strip.$(OBJEXT)  

################################################################
# source for non-windows
# the sources must be created using flex (NOT lex)
# and bison (not yacc)
################################################################

fast_source:
	bison -d -y parser.y
	$(MOVE) y.tab.c bison.c
	$(MOVE) y.tab.h bison.h
	flex  -Cf -8 lexer.l
	$(MOVE) lex.yy.c fast_flex.c
	flex  -Cf -8 stripper.l
	$(MOVE) lex.yy.c fast_strip.c

small_source:
	bison -d -y parser.y
	$(MOVE) y.tab.c bison.c
	$(MOVE) y.tab.h bison.h
	flex  -8 lexer.l
	$(MOVE) lex.yy.c small_flex.c
	flex -8 stripper.l
	$(MOVE) lex.yy.c small_strip.c

develop_source:
	bison -d -t -v -y parser.y
	$(MOVE) y.tab.c develop_bison.c
	$(MOVE) y.tab.h bison.h
	flex -p -p -b -v lexer.l
	$(MOVE) lex.yy.c develop_flex.c

################################################################
# developmental production
################################################################

develop:
	gcc -g -Wall -o mibgc develop_bison.c develop_flex.c

pure:
	purify gcc -g -o mibgc develop_bison.c develop_flex.c

################################################################
# clean for all
################################################################

clean:
	-$(RM) bison.$(OBJEXT)
	-$(RM) small_flex.$(OBJEXT)
	-$(RM) small_strip.$(OBJEXT)
	-$(RM) core
	-$(RM) lex.backup
	-$(RM) y.output
	-$(RM) $(BINDIR)\mibgc$(BINEXT)
	-$(RM) $(BINDIR)\mibgp$(BINEXT)

