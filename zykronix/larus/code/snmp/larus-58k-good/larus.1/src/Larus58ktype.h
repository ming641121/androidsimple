/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -search_table (implies -row_status) -c Larus58k larus58kMib -agent -per_file_init 
 * 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_LARUS58KTYPE_H
#define SR_LARUS58KTYPE_H


#ifdef __cplusplus
extern "C" {
#endif

#include "sr_proto.h"


extern int k_Larus58k_initialize
    SR_PROTOTYPE((void));

extern int k_Larus58k_terminate
    SR_PROTOTYPE((void));


/*
 * The sts58kSystem family. 
 */


typedef
struct _sts58kSystem_t {
        OctetString     *sts58kSystemId;
        SR_INT32        sts58kSystemMgmtIpOption;
        SR_UINT32       sts58kSystemMgmtIpAddress;
        SR_UINT32       sts58kSystemMgmtIpSubnetMask;
        SR_UINT32       sts58kSystemMgmtIpGatewayAddress;
        SR_INT32        sts58kSystemSntpIpOption;
        SR_UINT32       sts58kSystemSntpIpAddress;
        SR_UINT32       sts58kSystemSntpIpSubnetMask;
        SR_UINT32       sts58kSystemSntpIpGatewayAddress;
        OctetString     *sts58kSystemTime;
        SR_INT32        sts58kSystemTimeZone;
        SR_INT32        sts58kSystemIntegratedAlarm;
        SR_INT32        sts58kSystemAlarmAcoMode;
        SR_INT32        sts58kSystemAlarmAcoLed;
        SR_INT32        sts58kSystemAlarmAcoCutOff;
        SR_INT32        sts58kSystemAlarmEscalatingTime;
        SR_INT32        sts58kSystemMinorLED;
        SR_INT32        sts58kSystemMajorLED;
        SR_INT32        sts58kSystemCriticalLED;
        SR_INT32        sts58kSystemUpgradeSWAction;
        OctetString     *sts58kSystemCurrentSWVersion;
        SR_INT32        sts58kSystemServiceState;
        SR_INT32        sts58kSystemWarmReset;
        SR_INT32        sts58kSystemColdReset;
        SR_INT32        sts58kSystemConfigReset;
        char            valid[4];
} sts58kSystem_t;

extern VarBind * sts58kSystem_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kSystem_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kSystem_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kSystem_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kSystem_free
    SR_PROTOTYPE((sts58kSystem_t *data));

extern sts58kSystem_t *new_k_sts58kSystem_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kSystem_t *sts58kSystemData));

extern sts58kSystem_t *k_sts58kSystem_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_sts58kSystem_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kSystem_set
    SR_PROTOTYPE((sts58kSystem_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kSystem_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kSystem_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kSystem_t *Clone_sts58kSystem
    SR_PROTOTYPE((sts58kSystem_t *data));



/*
 * The sts58kClockInput family. 
 */


typedef
struct _sts58kClockInput_t {
        SR_INT32        sts58kClockInputManualSelect;
        SR_INT32        sts58kClockInputOperMode;
        SR_INT32        sts58kClockInputProtectedPri;
        SR_INT32        sts58kClockInputSetSlip;
        SR_INT32        sts58kClockInputType;
        char            valid[1];
} sts58kClockInput_t;

extern VarBind * sts58kClockInput_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kClockInput_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kClockInput_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kClockInput_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kClockInput_free
    SR_PROTOTYPE((sts58kClockInput_t *data));

extern sts58kClockInput_t *new_k_sts58kClockInput_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kClockInput_t *sts58kClockInputData));

extern sts58kClockInput_t *k_sts58kClockInput_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_sts58kClockInput_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kClockInput_set
    SR_PROTOTYPE((sts58kClockInput_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kClockInput_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kClockInput_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kClockInput_t *Clone_sts58kClockInput
    SR_PROTOTYPE((sts58kClockInput_t *data));



/*
 * The sts58kClockInputSSM family. 
 */


typedef
struct _sts58kClockInputSSM_t {
        SR_INT32        sts58kClockInputSSMSelect;
        char            valid[1];
} sts58kClockInputSSM_t;

extern VarBind * sts58kClockInputSSM_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kClockInputSSM_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kClockInputSSM_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kClockInputSSM_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kClockInputSSM_free
    SR_PROTOTYPE((sts58kClockInputSSM_t *data));

extern sts58kClockInputSSM_t *new_k_sts58kClockInputSSM_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kClockInputSSM_t *sts58kClockInputSSMData));

extern sts58kClockInputSSM_t *k_sts58kClockInputSSM_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_sts58kClockInputSSM_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kClockInputSSM_set
    SR_PROTOTYPE((sts58kClockInputSSM_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kClockInputSSM_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kClockInputSSM_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kClockInputSSM_t *Clone_sts58kClockInputSSM
    SR_PROTOTYPE((sts58kClockInputSSM_t *data));



/*
 * The sts58kTop family. 
 */


typedef
struct _sts58kTop_t {
        SR_INT32        sts58kTopSourceIpOption;
        SR_UINT32       sts58kTopSourceIpAddress;
        SR_UINT32       sts58kTopSourceIpSubnetMask;
        SR_UINT32       sts58kTopSourceIpGatewayAddress;
        SR_INT32        sts58kTopPacketRate;
        SR_INT32        sts58kTopInputSelect;
        SR_INT32        sts58kTopTxPackets;
        SR_INT32        sts58kTopTxBytes;
        char            valid[2];
} sts58kTop_t;

extern VarBind * sts58kTop_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kTop_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kTop_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kTop_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kTop_free
    SR_PROTOTYPE((sts58kTop_t *data));

extern sts58kTop_t *new_k_sts58kTop_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kTop_t *sts58kTopData));

extern sts58kTop_t *k_sts58kTop_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_sts58kTop_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kTop_set
    SR_PROTOTYPE((sts58kTop_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kTop_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kTop_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kTop_t *Clone_sts58kTop
    SR_PROTOTYPE((sts58kTop_t *data));



/*
 * The sts58kClockInputStatusEntry family. 
 */


typedef
struct _sts58kClockInputStatusEntry_t {
        SR_INT32        sts58kClockInputStatusIndex;
        SR_INT32        sts58kClockInputState;
        char            valid[1];
} sts58kClockInputStatusEntry_t;

extern VarBind * sts58kClockInputStatusEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern sts58kClockInputStatusEntry_t *new_k_sts58kClockInputStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kClockInputStatusEntry_t *sts58kClockInputStatusEntryData));

extern sts58kClockInputStatusEntry_t *k_sts58kClockInputStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kClockInputStatusIndex));



/*
 * The sts58kClockInputSSMEntry family. 
 */


typedef
struct _sts58kClockInputSSMEntry_t {
        SR_INT32        sts58kClockInputSSMIndex;
        SR_INT32        sts58kClockInputSSMType;
        SR_INT32        sts58kClockInputSSMValue;
        char            valid[1];
} sts58kClockInputSSMEntry_t;

extern VarBind * sts58kClockInputSSMEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern sts58kClockInputSSMEntry_t *new_k_sts58kClockInputSSMEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kClockInputSSMEntry_t *sts58kClockInputSSMEntryData));

extern sts58kClockInputSSMEntry_t *k_sts58kClockInputSSMEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kClockInputSSMIndex,
                  SR_INT32 sts58kClockInputSSMType));



/*
 * The sts58kCardEntry family. 
 */


typedef
struct _sts58kCardEntry_t {
        SR_INT32        sts58kCardShelf;
        SR_INT32        sts58kCardIndex;
        SR_INT32        sts58kCardType;
        OctetString     *sts58kCardDescr;
        OctetString     *sts58kCardSerial;
        OctetString     *sts58kCardHwVersion;
        OctetString     *sts58kCardCLEICode;
        SR_INT32        sts58kCardOperStatus;
        SR_INT32        sts58kCardReset;
        char            valid[2];
} sts58kCardEntry_t;

extern VarBind * sts58kCardEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kCardEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kCardEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kCardEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kCardEntry_free
    SR_PROTOTYPE((sts58kCardEntry_t *data));

extern sts58kCardEntry_t *new_k_sts58kCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kCardEntry_t *sts58kCardEntryData));

extern sts58kCardEntry_t *k_sts58kCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kCardShelf,
                  SR_INT32 sts58kCardIndex));

extern int k_sts58kCardEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kCardEntry_set
    SR_PROTOTYPE((sts58kCardEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kCardEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kCardEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kCardEntry_t *Clone_sts58kCardEntry
    SR_PROTOTYPE((sts58kCardEntry_t *data));

extern int k_sts58kCardEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kOscillatorEntry family. 
 */


typedef
struct _sts58kOscillatorEntry_t {
        SR_INT32        sts58kOscillatorIndex;
        SR_INT32        sts58kOscillatorModuleType;
        OctetString     *sts58kOscillatorEFER;
        OctetString     *sts58kOscillatorESSD;
        OctetString     *sts58kOscillatorESSN;
        OctetString     *sts58kOscillatorFAGE;
        OctetString     *sts58kOscillatorTIMD;
        SR_INT32        sts58kOscillatorSetActive;
        SR_INT32        sts58kOscillatorStatus;
        char            valid[2];
} sts58kOscillatorEntry_t;

extern VarBind * sts58kOscillatorEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kOscillatorEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOscillatorEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOscillatorEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kOscillatorEntry_free
    SR_PROTOTYPE((sts58kOscillatorEntry_t *data));

extern sts58kOscillatorEntry_t *new_k_sts58kOscillatorEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kOscillatorEntry_t *sts58kOscillatorEntryData));

extern sts58kOscillatorEntry_t *k_sts58kOscillatorEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kOscillatorIndex));

extern int k_sts58kOscillatorEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kOscillatorEntry_set
    SR_PROTOTYPE((sts58kOscillatorEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kOscillatorEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kOscillatorEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kOscillatorEntry_t *Clone_sts58kOscillatorEntry
    SR_PROTOTYPE((sts58kOscillatorEntry_t *data));

extern int k_sts58kOscillatorEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kGpsEntry family. 
 */


typedef
struct _sts58kGpsEntry_t {
        SR_INT32        sts58kGpsIndex;
        SR_INT32        sts58kGpsStatus;
        OctetString     *sts58kGpsANTD;
        OctetString     *sts58kGpsAZEL;
        OctetString     *sts58kGpsRSTG;
        OctetString     *sts58kGpsBITS;
        OctetString     *sts58kGpsPAVG;
        OctetString     *sts58kGpsSIGQ;
        OctetString     *sts58kGpsSPOS;
        OctetString     *sts58kGpsTRMO;
        OctetString     *sts58kGpsUTCT;
        OctetString     *sts58kGpsVERS;
        OctetString     *sts58kGpsDETF;
        OctetString     *sts58kGpsEFER;
        OctetString     *sts58kGpsESSD;
        OctetString     *sts58kGpsESSN;
        OctetString     *sts58kGpsFAGE;
        OctetString     *sts58kGpsTIMD;
        SR_INT32        sts58kGpsReset;
        char            valid[3];
} sts58kGpsEntry_t;

extern VarBind * sts58kGpsEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kGpsEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kGpsEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kGpsEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kGpsEntry_free
    SR_PROTOTYPE((sts58kGpsEntry_t *data));

extern sts58kGpsEntry_t *new_k_sts58kGpsEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kGpsEntry_t *sts58kGpsEntryData));

extern sts58kGpsEntry_t *k_sts58kGpsEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kGpsIndex));

extern int k_sts58kGpsEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kGpsEntry_set
    SR_PROTOTYPE((sts58kGpsEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kGpsEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kGpsEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kGpsEntry_t *Clone_sts58kGpsEntry
    SR_PROTOTYPE((sts58kGpsEntry_t *data));

extern int k_sts58kGpsEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kLinkEntry family. 
 */


typedef
struct _sts58kLinkEntry_t {
        SR_INT32        sts58kLinkIndex;
        SR_INT32        sts58kLinkType;
        SR_INT32        sts58kLinkEnable;
        SR_INT32        sts58kLinkLineCode;
        SR_INT32        sts58kLinkFMT;
        SR_INT32        sts58kLinkTermination;
        SR_INT32        sts58kLinkMFCHK;
        OctetString     *sts58kLinkId;
        char            valid[2];
} sts58kLinkEntry_t;

extern VarBind * sts58kLinkEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kLinkEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kLinkEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kLinkEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kLinkEntry_free
    SR_PROTOTYPE((sts58kLinkEntry_t *data));

extern sts58kLinkEntry_t *new_k_sts58kLinkEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kLinkEntry_t *sts58kLinkEntryData));

extern sts58kLinkEntry_t *k_sts58kLinkEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kLinkIndex));

extern int k_sts58kLinkEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kLinkEntry_set
    SR_PROTOTYPE((sts58kLinkEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kLinkEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kLinkEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kLinkEntry_t *Clone_sts58kLinkEntry
    SR_PROTOTYPE((sts58kLinkEntry_t *data));

extern int k_sts58kLinkEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kShelfEntry family. 
 */


typedef
struct _sts58kShelfEntry_t {
        SR_INT32        sts58kShelfIndex;
        OctetString     *sts58kShelfSerial;
        OctetString     *sts58kShelfCLEICode;
        SR_INT32        sts58kShelfReset;
        char            valid[1];
} sts58kShelfEntry_t;

extern VarBind * sts58kShelfEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kShelfEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kShelfEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kShelfEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kShelfEntry_free
    SR_PROTOTYPE((sts58kShelfEntry_t *data));

extern sts58kShelfEntry_t *new_k_sts58kShelfEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kShelfEntry_t *sts58kShelfEntryData));

extern sts58kShelfEntry_t *k_sts58kShelfEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kShelfIndex));

extern int k_sts58kShelfEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kShelfEntry_set
    SR_PROTOTYPE((sts58kShelfEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kShelfEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kShelfEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kShelfEntry_t *Clone_sts58kShelfEntry
    SR_PROTOTYPE((sts58kShelfEntry_t *data));

extern int k_sts58kShelfEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kAlarmThresholdEntry family. 
 */


typedef
struct _sts58kAlarmThresholdEntry_t {
        SR_INT32        sts58kAlarmThresholdCurrentMon;
        SR_INT32        sts58kAlarmThresholdType;
        SR_INT32        sts58kAlarmThresholdValue;
        SR_INT32        sts58kAlarmThresholdTimeInterval;
        char            valid[1];
} sts58kAlarmThresholdEntry_t;

extern VarBind * sts58kAlarmThresholdEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kAlarmThresholdEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kAlarmThresholdEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kAlarmThresholdEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kAlarmThresholdEntry_free
    SR_PROTOTYPE((sts58kAlarmThresholdEntry_t *data));

extern sts58kAlarmThresholdEntry_t *new_k_sts58kAlarmThresholdEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kAlarmThresholdEntry_t *sts58kAlarmThresholdEntryData));

extern sts58kAlarmThresholdEntry_t *k_sts58kAlarmThresholdEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kAlarmThresholdCurrentMon,
                  SR_INT32 sts58kAlarmThresholdType));

extern int k_sts58kAlarmThresholdEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kAlarmThresholdEntry_set
    SR_PROTOTYPE((sts58kAlarmThresholdEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kAlarmThresholdEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kAlarmThresholdEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kAlarmThresholdEntry_t *Clone_sts58kAlarmThresholdEntry
    SR_PROTOTYPE((sts58kAlarmThresholdEntry_t *data));

extern int k_sts58kAlarmThresholdEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kLinkAlarmEntry family. 
 */


typedef
struct _sts58kLinkAlarmEntry_t {
        SR_INT32        sts58kLinkAlarmSettingLinkType;
        SR_INT32        sts58kLinkAlarmSettingType;
        SR_INT32        sts58kLinkAlarmSettingSevirity;
        SR_INT32        sts58kLinkAlarmSevirity;
        char            valid[1];
} sts58kLinkAlarmEntry_t;

extern VarBind * sts58kLinkAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kLinkAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kLinkAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kLinkAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kLinkAlarmEntry_free
    SR_PROTOTYPE((sts58kLinkAlarmEntry_t *data));

extern sts58kLinkAlarmEntry_t *new_k_sts58kLinkAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kLinkAlarmEntry_t *sts58kLinkAlarmEntryData));

extern sts58kLinkAlarmEntry_t *k_sts58kLinkAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kLinkAlarmSettingLinkType,
                  SR_INT32 sts58kLinkAlarmSettingType));

extern int k_sts58kLinkAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kLinkAlarmEntry_set
    SR_PROTOTYPE((sts58kLinkAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kLinkAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kLinkAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kLinkAlarmEntry_t *Clone_sts58kLinkAlarmEntry
    SR_PROTOTYPE((sts58kLinkAlarmEntry_t *data));

extern int k_sts58kLinkAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kOscillatorAlarmEntry family. 
 */


typedef
struct _sts58kOscillatorAlarmEntry_t {
        SR_INT32        sts58kOscillatorAlarmSettingClock;
        SR_INT32        sts58kOscillatorAlarmSettingType;
        SR_INT32        sts58kOscillatorAlarmSettingSeverity;
        SR_INT32        sts58kOscillatorAlarmSeverity;
        char            valid[1];
} sts58kOscillatorAlarmEntry_t;

extern VarBind * sts58kOscillatorAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kOscillatorAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOscillatorAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOscillatorAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kOscillatorAlarmEntry_free
    SR_PROTOTYPE((sts58kOscillatorAlarmEntry_t *data));

extern sts58kOscillatorAlarmEntry_t *new_k_sts58kOscillatorAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kOscillatorAlarmEntry_t *sts58kOscillatorAlarmEntryData));

extern sts58kOscillatorAlarmEntry_t *k_sts58kOscillatorAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kOscillatorAlarmSettingClock,
                  SR_INT32 sts58kOscillatorAlarmSettingType));

extern int k_sts58kOscillatorAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kOscillatorAlarmEntry_set
    SR_PROTOTYPE((sts58kOscillatorAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kOscillatorAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kOscillatorAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kOscillatorAlarmEntry_t *Clone_sts58kOscillatorAlarmEntry
    SR_PROTOTYPE((sts58kOscillatorAlarmEntry_t *data));

extern int k_sts58kOscillatorAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kOsPwrAlarmEntry family. 
 */


typedef
struct _sts58kOsPwrAlarmEntry_t {
        SR_INT32        sts58ksPwrAlarmSettingShelf;
        SR_INT32        sts58kOsPwrAlarmSettingOsPwr;
        SR_INT32        sts58kOsPwrAlarmSettingSeverity;
        SR_INT32        sts58kOsPwrAlarmSeverity;
        char            valid[1];
} sts58kOsPwrAlarmEntry_t;

extern VarBind * sts58kOsPwrAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kOsPwrAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOsPwrAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOsPwrAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kOsPwrAlarmEntry_free
    SR_PROTOTYPE((sts58kOsPwrAlarmEntry_t *data));

extern sts58kOsPwrAlarmEntry_t *new_k_sts58kOsPwrAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kOsPwrAlarmEntry_t *sts58kOsPwrAlarmEntryData));

extern sts58kOsPwrAlarmEntry_t *k_sts58kOsPwrAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58ksPwrAlarmSettingShelf,
                  SR_INT32 sts58kOsPwrAlarmSettingOsPwr));

extern int k_sts58kOsPwrAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kOsPwrAlarmEntry_set
    SR_PROTOTYPE((sts58kOsPwrAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kOsPwrAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kOsPwrAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kOsPwrAlarmEntry_t *Clone_sts58kOsPwrAlarmEntry
    SR_PROTOTYPE((sts58kOsPwrAlarmEntry_t *data));

extern int k_sts58kOsPwrAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kOutputAlarmEntry family. 
 */


typedef
struct _sts58kOutputAlarmEntry_t {
        SR_INT32        sts58kOutputAlarmSettingShelf;
        SR_INT32        sts58kOutputAlarmSettingSlot;
        SR_INT32        sts58kOutputAlarmSettingPort;
        SR_INT32        sts58kOutputAlarmSettingType;
        SR_INT32        sts58kOutputAlarmSettingSeverity;
        SR_INT32        sts58kOutputAlarmSeverity;
        char            valid[1];
} sts58kOutputAlarmEntry_t;

extern VarBind * sts58kOutputAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kOutputAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOutputAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOutputAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kOutputAlarmEntry_free
    SR_PROTOTYPE((sts58kOutputAlarmEntry_t *data));

extern sts58kOutputAlarmEntry_t *new_k_sts58kOutputAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kOutputAlarmEntry_t *sts58kOutputAlarmEntryData));

extern sts58kOutputAlarmEntry_t *k_sts58kOutputAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kOutputAlarmSettingShelf,
                  SR_INT32 sts58kOutputAlarmSettingSlot,
                  SR_INT32 sts58kOutputAlarmSettingPort,
                  SR_INT32 sts58kOutputAlarmSettingType));

extern int k_sts58kOutputAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kOutputAlarmEntry_set
    SR_PROTOTYPE((sts58kOutputAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kOutputAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kOutputAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kOutputAlarmEntry_t *Clone_sts58kOutputAlarmEntry
    SR_PROTOTYPE((sts58kOutputAlarmEntry_t *data));

extern int k_sts58kOutputAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kOutputTiuSettingEntry family. 
 */


typedef
struct _sts58kOutputTiuSettingEntry_t {
        SR_INT32        sts58kOutputTiuSettingShelf;
        SR_INT32        sts58kOutputTiuSettingSlot;
        SR_INT32        sts58kOutputTiuSettingPort;
        SR_INT32        sts58kOutputTiuSettingLineCoding;
        SR_INT32        sts58kOutputTiuSettingFMT;
        SR_INT32        sts58kOutputTiuSettingTermination;
        char            valid[1];
} sts58kOutputTiuSettingEntry_t;

extern VarBind * sts58kOutputTiuSettingEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kOutputTiuSettingEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOutputTiuSettingEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOutputTiuSettingEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kOutputTiuSettingEntry_free
    SR_PROTOTYPE((sts58kOutputTiuSettingEntry_t *data));

extern sts58kOutputTiuSettingEntry_t *new_k_sts58kOutputTiuSettingEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kOutputTiuSettingEntry_t *sts58kOutputTiuSettingEntryData));

extern sts58kOutputTiuSettingEntry_t *k_sts58kOutputTiuSettingEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kOutputTiuSettingShelf,
                  SR_INT32 sts58kOutputTiuSettingSlot,
                  SR_INT32 sts58kOutputTiuSettingPort));

extern int k_sts58kOutputTiuSettingEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kOutputTiuSettingEntry_set
    SR_PROTOTYPE((sts58kOutputTiuSettingEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kOutputTiuSettingEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kOutputTiuSettingEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kOutputTiuSettingEntry_t *Clone_sts58kOutputTiuSettingEntry
    SR_PROTOTYPE((sts58kOutputTiuSettingEntry_t *data));

extern int k_sts58kOutputTiuSettingEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kPerfMonEntry family. 
 */


typedef
struct _sts58kPerfMonEntry_t {
        SR_INT32        sts58kPerfMonInputCurrentMon;
        SR_INT32        sts58kPerfMonInputMonPeriod;
        SR_INT32        sts58kPerfMonInputMonBucket;
        SR_INT32        sts58kPerfMonInputClockType;
        SR_INT32        sts58kPerfMonPerfCVL;
        SR_INT32        sts58kPerfMonPerfCVP;
        SR_INT32        sts58kPerfMonPerfCS;
        SR_INT32        sts58kPerfMonPerfESP;
        SR_INT32        sts58kPerfMonPerfJitter;
        OctetString     *sts58kPerfMonPerfPhaseData;
        SR_INT32        sts58kPerfMonPerfSESP;
        SR_INT32        sts58kPerfMonPerfTIE;
        SR_INT32        sts58kPerfMonPerfMTIE;
        SR_INT32        sts58kPerfMonPerfWDR5M;
        SR_INT32        sts58kPerfMonPerfWDR24H;
        char            valid[2];
} sts58kPerfMonEntry_t;

extern VarBind * sts58kPerfMonEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern sts58kPerfMonEntry_t *new_k_sts58kPerfMonEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kPerfMonEntry_t *sts58kPerfMonEntryData));

extern sts58kPerfMonEntry_t *k_sts58kPerfMonEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kPerfMonInputCurrentMon,
                  SR_INT32 sts58kPerfMonInputMonPeriod,
                  SR_INT32 sts58kPerfMonInputMonBucket));



/*
 * The sts58kAlarmStatusEntry family. 
 */


typedef
struct _sts58kAlarmStatusEntry_t {
        SR_INT32        sts58kAlarmSource;
        SR_INT32        sts58kAlarmSourceType;
        SR_INT32        sts58kAlarmSeverity;
        SR_INT32        sts58kAlarmSrvEff;
        char            valid[1];
} sts58kAlarmStatusEntry_t;

extern VarBind * sts58kAlarmStatusEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern sts58kAlarmStatusEntry_t *new_k_sts58kAlarmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kAlarmStatusEntry_t *sts58kAlarmStatusEntryData));

extern sts58kAlarmStatusEntry_t *k_sts58kAlarmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kAlarmSource));



/*
 * The sts58kOutputCardEntry family. 
 */


typedef
struct _sts58kOutputCardEntry_t {
        SR_INT32        sts58kOutputShelf;
        SR_INT32        sts58kOutputSlot;
        SR_INT32        sts58kOutputRedState;
        SR_INT32        sts58kOutputRedSwitchState;
        SR_INT32        sts58kOutputCRCCHK;
        SR_INT32        sts58kOutputCAS;
        SR_INT32        sts58kOutputSSM;
        SR_INT32        sts58kOutputSSMValue;
        OctetString     *sts58kOutputTimingFormat;
        char            valid[2];
} sts58kOutputCardEntry_t;

extern VarBind * sts58kOutputCardEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kOutputCardEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOutputCardEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kOutputCardEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kOutputCardEntry_free
    SR_PROTOTYPE((sts58kOutputCardEntry_t *data));

extern sts58kOutputCardEntry_t *new_k_sts58kOutputCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kOutputCardEntry_t *sts58kOutputCardEntryData));

extern sts58kOutputCardEntry_t *k_sts58kOutputCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kOutputShelf,
                  SR_INT32 sts58kOutputSlot));

extern int k_sts58kOutputCardEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kOutputCardEntry_set
    SR_PROTOTYPE((sts58kOutputCardEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kOutputCardEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kOutputCardEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kOutputCardEntry_t *Clone_sts58kOutputCardEntry
    SR_PROTOTYPE((sts58kOutputCardEntry_t *data));

extern int k_sts58kOutputCardEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kEmmStatusEntry family. 
 */


typedef
struct _sts58kEmmStatusEntry_t {
        SR_INT32        sts58kEmmShelf;
        SR_INT32        sts58kEmmUnitId;
        SR_INT32        sts58kEmmSensorType;
        SR_INT32        sts58kEmmAlarmStatus;
        SR_INT32        sts58kEmmSensorReading;
        SR_INT32        sts58kEmmMajorAlmHiThresh;
        SR_INT32        sts58kEmmMajorAlmLoThresh;
        SR_INT32        sts58kEmmMinorAlmHiThresh;
        SR_INT32        sts58kEmmMinorAlmLoThresh;
        char            valid[2];
} sts58kEmmStatusEntry_t;

extern VarBind * sts58kEmmStatusEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kEmmStatusEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kEmmStatusEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kEmmStatusEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kEmmStatusEntry_free
    SR_PROTOTYPE((sts58kEmmStatusEntry_t *data));

extern sts58kEmmStatusEntry_t *new_k_sts58kEmmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kEmmStatusEntry_t *sts58kEmmStatusEntryData));

extern sts58kEmmStatusEntry_t *k_sts58kEmmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kEmmShelf,
                  SR_INT32 sts58kEmmUnitId));

extern int k_sts58kEmmStatusEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kEmmStatusEntry_set
    SR_PROTOTYPE((sts58kEmmStatusEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kEmmStatusEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kEmmStatusEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kEmmStatusEntry_t *Clone_sts58kEmmStatusEntry
    SR_PROTOTYPE((sts58kEmmStatusEntry_t *data));

extern int k_sts58kEmmStatusEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kAntEntry family. 
 */


typedef
struct _sts58kAntEntry_t {
        SR_INT32        sts58kAntIndex;
        SR_INT32        sts58kAntStatus;
        SR_INT32        sts58kAntSwitchState;
        char            valid[1];
} sts58kAntEntry_t;

extern VarBind * sts58kAntEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kAntEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kAntEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kAntEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kAntEntry_free
    SR_PROTOTYPE((sts58kAntEntry_t *data));

extern sts58kAntEntry_t *new_k_sts58kAntEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kAntEntry_t *sts58kAntEntryData));

extern sts58kAntEntry_t *k_sts58kAntEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kAntIndex));

extern int k_sts58kAntEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kAntEntry_set
    SR_PROTOTYPE((sts58kAntEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kAntEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kAntEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kAntEntry_t *Clone_sts58kAntEntry
    SR_PROTOTYPE((sts58kAntEntry_t *data));

extern int k_sts58kAntEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kTopDestEntry family. 
 */


typedef
struct _sts58kTopDestEntry_t {
        SR_INT32        sts58kTopDestNumber;
        SR_UINT32       sts58kTopDestIp;
        SR_INT32        sts58kTopDestUdpPort;
        SR_INT32        sts58kTopDestVlanId;
        char            valid[1];
} sts58kTopDestEntry_t;

extern VarBind * sts58kTopDestEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kTopDestEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kTopDestEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kTopDestEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kTopDestEntry_free
    SR_PROTOTYPE((sts58kTopDestEntry_t *data));

extern sts58kTopDestEntry_t *new_k_sts58kTopDestEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kTopDestEntry_t *sts58kTopDestEntryData));

extern sts58kTopDestEntry_t *k_sts58kTopDestEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kTopDestNumber));

extern int k_sts58kTopDestEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kTopDestEntry_set
    SR_PROTOTYPE((sts58kTopDestEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kTopDestEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kTopDestEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kTopDestEntry_t *Clone_sts58kTopDestEntry
    SR_PROTOTYPE((sts58kTopDestEntry_t *data));

extern int k_sts58kTopDestEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The sts58kTrapRegEntry family. 
 */


typedef
struct _sts58kTrapRegEntry_t {
        SR_INT32        sts58kTrapRegMgrNumber;
        SR_UINT32       sts58kTrapRegMgrIp;
        SR_INT32        sts58kTrapRegMgrUdpPort;
        OctetString     *sts58kTrapRegCommunityStr;
        SR_INT32        sts58kTrapRegState;
        char            valid[1];
} sts58kTrapRegEntry_t;

extern VarBind * sts58kTrapRegEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int sts58kTrapRegEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kTrapRegEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int sts58kTrapRegEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void sts58kTrapRegEntry_free
    SR_PROTOTYPE((sts58kTrapRegEntry_t *data));

extern sts58kTrapRegEntry_t *new_k_sts58kTrapRegEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  sts58kTrapRegEntry_t *sts58kTrapRegEntryData));

extern sts58kTrapRegEntry_t *k_sts58kTrapRegEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 sts58kTrapRegMgrNumber));

extern int k_sts58kTrapRegEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_sts58kTrapRegEntry_set
    SR_PROTOTYPE((sts58kTrapRegEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_sts58kTrapRegEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int sts58kTrapRegEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern sts58kTrapRegEntry_t *Clone_sts58kTrapRegEntry
    SR_PROTOTYPE((sts58kTrapRegEntry_t *data));

extern int k_sts58kTrapRegEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_LARUS58KTYPE_H */
