/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -o snmp -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_SNMPPROT_H
#define SR_SNMPPROT_H


#ifdef __cplusplus
extern "C" {
#endif

#include "sr_proto.h"

extern int k_initialize
    SR_PROTOTYPE((void));

extern int k_terminate
    SR_PROTOTYPE((void));


/*
 * The system family. 
 */

extern VarBind * system_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern system_t *new_k_system_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  system_t *systemData));

extern system_t *k_system_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));



/*
 * The stsSystem family. 
 */

extern VarBind * stsSystem_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsSystem_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsSystem_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsSystem_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsSystem_free
    SR_PROTOTYPE((stsSystem_t *data));

extern stsSystem_t *new_k_stsSystem_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsSystem_t *stsSystemData));

extern stsSystem_t *k_stsSystem_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_stsSystem_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsSystem_set
    SR_PROTOTYPE((stsSystem_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsSystem_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsSystem_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsSystem_t *Clone_stsSystem
    SR_PROTOTYPE((stsSystem_t *data));



/*
 * The stsClockInput family. 
 */

extern VarBind * stsClockInput_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsClockInput_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsClockInput_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsClockInput_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsClockInput_free
    SR_PROTOTYPE((stsClockInput_t *data));

extern stsClockInput_t *new_k_stsClockInput_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsClockInput_t *stsClockInputData));

extern stsClockInput_t *k_stsClockInput_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_stsClockInput_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsClockInput_set
    SR_PROTOTYPE((stsClockInput_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsClockInput_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsClockInput_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsClockInput_t *Clone_stsClockInput
    SR_PROTOTYPE((stsClockInput_t *data));



/*
 * The stsClockInputSSM family. 
 */

extern VarBind * stsClockInputSSM_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsClockInputSSM_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsClockInputSSM_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsClockInputSSM_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsClockInputSSM_free
    SR_PROTOTYPE((stsClockInputSSM_t *data));

extern stsClockInputSSM_t *new_k_stsClockInputSSM_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsClockInputSSM_t *stsClockInputSSMData));

extern stsClockInputSSM_t *k_stsClockInputSSM_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_stsClockInputSSM_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsClockInputSSM_set
    SR_PROTOTYPE((stsClockInputSSM_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsClockInputSSM_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsClockInputSSM_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsClockInputSSM_t *Clone_stsClockInputSSM
    SR_PROTOTYPE((stsClockInputSSM_t *data));



/*
 * The stsTop family. 
 */

extern VarBind * stsTop_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsTop_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsTop_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsTop_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsTop_free
    SR_PROTOTYPE((stsTop_t *data));

extern stsTop_t *new_k_stsTop_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsTop_t *stsTopData));

extern stsTop_t *k_stsTop_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator));

extern int k_stsTop_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsTop_set
    SR_PROTOTYPE((stsTop_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsTop_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsTop_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsTop_t *Clone_stsTop
    SR_PROTOTYPE((stsTop_t *data));



/*
 * The stsClockInputStatusEntry family. 
 */

extern VarBind * stsClockInputStatusEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern stsClockInputStatusEntry_t *new_k_stsClockInputStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsClockInputStatusEntry_t *stsClockInputStatusEntryData));

extern stsClockInputStatusEntry_t *k_stsClockInputStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsClockInputStatusIndex));



/*
 * The stsClockInputSSMEntry family. 
 */

extern VarBind * stsClockInputSSMEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern stsClockInputSSMEntry_t *new_k_stsClockInputSSMEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsClockInputSSMEntry_t *stsClockInputSSMEntryData));

extern stsClockInputSSMEntry_t *k_stsClockInputSSMEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsClockInputSSMIndex,
                  SR_INT32 stsClockInputSSMType));



/*
 * The stsCardEntry family. 
 */

extern VarBind * stsCardEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsCardEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsCardEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsCardEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsCardEntry_free
    SR_PROTOTYPE((stsCardEntry_t *data));

extern stsCardEntry_t *new_k_stsCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsCardEntry_t *stsCardEntryData));

extern stsCardEntry_t *k_stsCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsCardShelf,
                  SR_INT32 stsCardIndex));

extern int k_stsCardEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsCardEntry_set
    SR_PROTOTYPE((stsCardEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsCardEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsCardEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsCardEntry_t *Clone_stsCardEntry
    SR_PROTOTYPE((stsCardEntry_t *data));

extern int k_stsCardEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsOscillatorEntry family. 
 */

extern VarBind * stsOscillatorEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsOscillatorEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOscillatorEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOscillatorEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsOscillatorEntry_free
    SR_PROTOTYPE((stsOscillatorEntry_t *data));

extern stsOscillatorEntry_t *new_k_stsOscillatorEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsOscillatorEntry_t *stsOscillatorEntryData));

extern stsOscillatorEntry_t *k_stsOscillatorEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsOscillatorIndex));

extern int k_stsOscillatorEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsOscillatorEntry_set
    SR_PROTOTYPE((stsOscillatorEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsOscillatorEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsOscillatorEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsOscillatorEntry_t *Clone_stsOscillatorEntry
    SR_PROTOTYPE((stsOscillatorEntry_t *data));

extern int k_stsOscillatorEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsGpsEntry family. 
 */

extern VarBind * stsGpsEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsGpsEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsGpsEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsGpsEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsGpsEntry_free
    SR_PROTOTYPE((stsGpsEntry_t *data));

extern stsGpsEntry_t *new_k_stsGpsEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsGpsEntry_t *stsGpsEntryData));

extern stsGpsEntry_t *k_stsGpsEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsGpsIndex));

extern int k_stsGpsEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsGpsEntry_set
    SR_PROTOTYPE((stsGpsEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsGpsEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsGpsEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsGpsEntry_t *Clone_stsGpsEntry
    SR_PROTOTYPE((stsGpsEntry_t *data));

extern int k_stsGpsEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsLinkEntry family. 
 */

extern VarBind * stsLinkEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsLinkEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsLinkEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsLinkEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsLinkEntry_free
    SR_PROTOTYPE((stsLinkEntry_t *data));

extern stsLinkEntry_t *new_k_stsLinkEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsLinkEntry_t *stsLinkEntryData));

extern stsLinkEntry_t *k_stsLinkEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsLinkIndex));

extern int k_stsLinkEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsLinkEntry_set
    SR_PROTOTYPE((stsLinkEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsLinkEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsLinkEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsLinkEntry_t *Clone_stsLinkEntry
    SR_PROTOTYPE((stsLinkEntry_t *data));

extern int k_stsLinkEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsShelfEntry family. 
 */

extern VarBind * stsShelfEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsShelfEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsShelfEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsShelfEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsShelfEntry_free
    SR_PROTOTYPE((stsShelfEntry_t *data));

extern stsShelfEntry_t *new_k_stsShelfEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsShelfEntry_t *stsShelfEntryData));

extern stsShelfEntry_t *k_stsShelfEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsShelfIndex));

extern int k_stsShelfEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsShelfEntry_set
    SR_PROTOTYPE((stsShelfEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsShelfEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsShelfEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsShelfEntry_t *Clone_stsShelfEntry
    SR_PROTOTYPE((stsShelfEntry_t *data));

extern int k_stsShelfEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsAlarmThresholdEntry family. 
 */

extern VarBind * stsAlarmThresholdEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsAlarmThresholdEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsAlarmThresholdEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsAlarmThresholdEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsAlarmThresholdEntry_free
    SR_PROTOTYPE((stsAlarmThresholdEntry_t *data));

extern stsAlarmThresholdEntry_t *new_k_stsAlarmThresholdEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsAlarmThresholdEntry_t *stsAlarmThresholdEntryData));

extern stsAlarmThresholdEntry_t *k_stsAlarmThresholdEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsAlarmThresholdCurrentMon,
                  SR_INT32 stsAlarmThresholdType));

extern int k_stsAlarmThresholdEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsAlarmThresholdEntry_set
    SR_PROTOTYPE((stsAlarmThresholdEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsAlarmThresholdEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsAlarmThresholdEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsAlarmThresholdEntry_t *Clone_stsAlarmThresholdEntry
    SR_PROTOTYPE((stsAlarmThresholdEntry_t *data));

extern int k_stsAlarmThresholdEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsLinkAlarmEntry family. 
 */

extern VarBind * stsLinkAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsLinkAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsLinkAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsLinkAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsLinkAlarmEntry_free
    SR_PROTOTYPE((stsLinkAlarmEntry_t *data));

extern stsLinkAlarmEntry_t *new_k_stsLinkAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsLinkAlarmEntry_t *stsLinkAlarmEntryData));

extern stsLinkAlarmEntry_t *k_stsLinkAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsLinkAlarmSettingLinkType,
                  SR_INT32 stsLinkAlarmSettingType));

extern int k_stsLinkAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsLinkAlarmEntry_set
    SR_PROTOTYPE((stsLinkAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsLinkAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsLinkAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsLinkAlarmEntry_t *Clone_stsLinkAlarmEntry
    SR_PROTOTYPE((stsLinkAlarmEntry_t *data));

extern int k_stsLinkAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsOscillatorAlarmEntry family. 
 */

extern VarBind * stsOscillatorAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsOscillatorAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOscillatorAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOscillatorAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsOscillatorAlarmEntry_free
    SR_PROTOTYPE((stsOscillatorAlarmEntry_t *data));

extern stsOscillatorAlarmEntry_t *new_k_stsOscillatorAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsOscillatorAlarmEntry_t *stsOscillatorAlarmEntryData));

extern stsOscillatorAlarmEntry_t *k_stsOscillatorAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsOscillatorAlarmSettingClock,
                  SR_INT32 stsOscillatorAlarmSettingType));

extern int k_stsOscillatorAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsOscillatorAlarmEntry_set
    SR_PROTOTYPE((stsOscillatorAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsOscillatorAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsOscillatorAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsOscillatorAlarmEntry_t *Clone_stsOscillatorAlarmEntry
    SR_PROTOTYPE((stsOscillatorAlarmEntry_t *data));

extern int k_stsOscillatorAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsOsPwrAlarmEntry family. 
 */

extern VarBind * stsOsPwrAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsOsPwrAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOsPwrAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOsPwrAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsOsPwrAlarmEntry_free
    SR_PROTOTYPE((stsOsPwrAlarmEntry_t *data));

extern stsOsPwrAlarmEntry_t *new_k_stsOsPwrAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsOsPwrAlarmEntry_t *stsOsPwrAlarmEntryData));

extern stsOsPwrAlarmEntry_t *k_stsOsPwrAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stssPwrAlarmSettingShelf,
                  SR_INT32 stsOsPwrAlarmSettingOsPwr));

extern int k_stsOsPwrAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsOsPwrAlarmEntry_set
    SR_PROTOTYPE((stsOsPwrAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsOsPwrAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsOsPwrAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsOsPwrAlarmEntry_t *Clone_stsOsPwrAlarmEntry
    SR_PROTOTYPE((stsOsPwrAlarmEntry_t *data));

extern int k_stsOsPwrAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsOutputAlarmEntry family. 
 */

extern VarBind * stsOutputAlarmEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsOutputAlarmEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOutputAlarmEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOutputAlarmEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsOutputAlarmEntry_free
    SR_PROTOTYPE((stsOutputAlarmEntry_t *data));

extern stsOutputAlarmEntry_t *new_k_stsOutputAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsOutputAlarmEntry_t *stsOutputAlarmEntryData));

extern stsOutputAlarmEntry_t *k_stsOutputAlarmEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsOutputAlarmSettingShelf,
                  SR_INT32 stsOutputAlarmSettingSlot,
                  SR_INT32 stsOutputAlarmSettingPort,
                  SR_INT32 stsOutputAlarmSettingType));

extern int k_stsOutputAlarmEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsOutputAlarmEntry_set
    SR_PROTOTYPE((stsOutputAlarmEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsOutputAlarmEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsOutputAlarmEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsOutputAlarmEntry_t *Clone_stsOutputAlarmEntry
    SR_PROTOTYPE((stsOutputAlarmEntry_t *data));

extern int k_stsOutputAlarmEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsOutputTiuSettingEntry family. 
 */

extern VarBind * stsOutputTiuSettingEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsOutputTiuSettingEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOutputTiuSettingEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOutputTiuSettingEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsOutputTiuSettingEntry_free
    SR_PROTOTYPE((stsOutputTiuSettingEntry_t *data));

extern stsOutputTiuSettingEntry_t *new_k_stsOutputTiuSettingEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsOutputTiuSettingEntry_t *stsOutputTiuSettingEntryData));

extern stsOutputTiuSettingEntry_t *k_stsOutputTiuSettingEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsOutputTiuSettingShelf,
                  SR_INT32 stsOutputTiuSettingSlot,
                  SR_INT32 stsOutputTiuSettingPort));

extern int k_stsOutputTiuSettingEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsOutputTiuSettingEntry_set
    SR_PROTOTYPE((stsOutputTiuSettingEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsOutputTiuSettingEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsOutputTiuSettingEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsOutputTiuSettingEntry_t *Clone_stsOutputTiuSettingEntry
    SR_PROTOTYPE((stsOutputTiuSettingEntry_t *data));

extern int k_stsOutputTiuSettingEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsPerfMonEntry family. 
 */

extern VarBind * stsPerfMonEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern stsPerfMonEntry_t *new_k_stsPerfMonEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsPerfMonEntry_t *stsPerfMonEntryData));

extern stsPerfMonEntry_t *k_stsPerfMonEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsPerfMonInputCurrentMon,
                  SR_INT32 stsPerfMonInputMonPeriod,
                  SR_INT32 stsPerfMonInputMonBucket));



/*
 * The stsAlarmStatusEntry family. 
 */

extern VarBind * stsAlarmStatusEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern stsAlarmStatusEntry_t *new_k_stsAlarmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsAlarmStatusEntry_t *stsAlarmStatusEntryData));

extern stsAlarmStatusEntry_t *k_stsAlarmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsAlarmSource));



/*
 * The stsOutputCardEntry family. 
 */

extern VarBind * stsOutputCardEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsOutputCardEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOutputCardEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsOutputCardEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsOutputCardEntry_free
    SR_PROTOTYPE((stsOutputCardEntry_t *data));

extern stsOutputCardEntry_t *new_k_stsOutputCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsOutputCardEntry_t *stsOutputCardEntryData));

extern stsOutputCardEntry_t *k_stsOutputCardEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsOutputShelf,
                  SR_INT32 stsOutputSlot));

extern int k_stsOutputCardEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsOutputCardEntry_set
    SR_PROTOTYPE((stsOutputCardEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsOutputCardEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsOutputCardEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsOutputCardEntry_t *Clone_stsOutputCardEntry
    SR_PROTOTYPE((stsOutputCardEntry_t *data));

extern int k_stsOutputCardEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsEmmStatusEntry family. 
 */

extern VarBind * stsEmmStatusEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsEmmStatusEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsEmmStatusEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsEmmStatusEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsEmmStatusEntry_free
    SR_PROTOTYPE((stsEmmStatusEntry_t *data));

extern stsEmmStatusEntry_t *new_k_stsEmmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsEmmStatusEntry_t *stsEmmStatusEntryData));

extern stsEmmStatusEntry_t *k_stsEmmStatusEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsEmmShelf,
                  SR_INT32 stsEmmUnitId));

extern int k_stsEmmStatusEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsEmmStatusEntry_set
    SR_PROTOTYPE((stsEmmStatusEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsEmmStatusEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsEmmStatusEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsEmmStatusEntry_t *Clone_stsEmmStatusEntry
    SR_PROTOTYPE((stsEmmStatusEntry_t *data));

extern int k_stsEmmStatusEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsAntEntry family. 
 */

extern VarBind * stsAntEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsAntEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsAntEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsAntEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsAntEntry_free
    SR_PROTOTYPE((stsAntEntry_t *data));

extern stsAntEntry_t *new_k_stsAntEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsAntEntry_t *stsAntEntryData));

extern stsAntEntry_t *k_stsAntEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsAntIndex));

extern int k_stsAntEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsAntEntry_set
    SR_PROTOTYPE((stsAntEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsAntEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsAntEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsAntEntry_t *Clone_stsAntEntry
    SR_PROTOTYPE((stsAntEntry_t *data));

extern int k_stsAntEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsTopDestEntry family. 
 */

extern VarBind * stsTopDestEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsTopDestEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsTopDestEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsTopDestEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsTopDestEntry_free
    SR_PROTOTYPE((stsTopDestEntry_t *data));

extern stsTopDestEntry_t *new_k_stsTopDestEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsTopDestEntry_t *stsTopDestEntryData));

extern stsTopDestEntry_t *k_stsTopDestEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsTopDestNumber));

extern int k_stsTopDestEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsTopDestEntry_set
    SR_PROTOTYPE((stsTopDestEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsTopDestEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsTopDestEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsTopDestEntry_t *Clone_stsTopDestEntry
    SR_PROTOTYPE((stsTopDestEntry_t *data));

extern int k_stsTopDestEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



/*
 * The stsTrapRegEntry family. 
 */

extern VarBind * stsTrapRegEntry_get
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  int searchType,
                  ContextInfo *contextInfo,
                  int serialNum));

extern int stsTrapRegEntry_test
    SR_PROTOTYPE((OID *incoming,
                  ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsTrapRegEntry_ready
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern int stsTrapRegEntry_set
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern void stsTrapRegEntry_free
    SR_PROTOTYPE((stsTrapRegEntry_t *data));

extern stsTrapRegEntry_t *new_k_stsTrapRegEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  stsTrapRegEntry_t *stsTrapRegEntryData));

extern stsTrapRegEntry_t *k_stsTrapRegEntry_get
    SR_PROTOTYPE((int serialNum,
                  ContextInfo *contextInfo,
                  int nominator,
                  int searchType,
                  SR_INT32 stsTrapRegMgrNumber));

extern int k_stsTrapRegEntry_test
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *dp,
                  ContextInfo *contextInfo));

extern int k_stsTrapRegEntry_set
    SR_PROTOTYPE((stsTrapRegEntry_t *data,
                  ContextInfo *contextInfo,
                  int function));

extern int k_stsTrapRegEntry_ready
    SR_PROTOTYPE((ObjectInfo *object,
                  ObjectSyntax *value,
                  doList_t *doHead,
                  doList_t *dp));

extern int stsTrapRegEntry_undo
    SR_PROTOTYPE((doList_t *doHead,
                  doList_t *doCur,
                  ContextInfo *contextInfo));

extern stsTrapRegEntry_t *Clone_stsTrapRegEntry
    SR_PROTOTYPE((stsTrapRegEntry_t *data));

extern int k_stsTrapRegEntry_set_defaults
    SR_PROTOTYPE((doList_t *dp));



#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_SNMPPROT_H */
