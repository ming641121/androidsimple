/*
 *
 * Copyright (C) 1992-2003 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -o snmp -separate_type_file 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_SNMPTYPE_H
#define SR_SNMPTYPE_H


#ifdef __cplusplus
extern "C" {
#endif



/*
 * The system family. 
 */


typedef
struct _system_t {
        OctetString     *sysDescr;
        OID             *sysObjectID;
        char            valid[1];
} system_t;


/*
 * The stsSystem family. 
 */


typedef
struct _stsSystem_t {
        OctetString     *stsSystemId;
        SR_INT32        stsSystemMgmtIpOption;
        SR_UINT32       stsSystemMgmtIpAddress;
        SR_UINT32       stsSystemMgmtIpSubnetMask;
        SR_UINT32       stsSystemMgmtIpGatewayAddress;
        SR_INT32        stsSystemSntpIpOption;
        SR_UINT32       stsSystemSntpIpAddress;
        SR_UINT32       stsSystemSntpIpSubnetMask;
        SR_UINT32       stsSystemSntpIpGatewayAddress;
        OctetString     *stsSystemTime;
        SR_INT32        stsSystemTimeZone;
        SR_INT32        stsSystemIntegratedAlarm;
        SR_INT32        stsSystemAlarmAcoMode;
        SR_INT32        stsSystemAlarmAcoLed;
        SR_INT32        stsSystemAlarmAcoCutOff;
        SR_INT32        stsSystemAlarmEscalatingTime;
        SR_INT32        stsSystemMinorLED;
        SR_INT32        stsSystemMajorLED;
        SR_INT32        stsSystemCriticalLED;
        SR_INT32        stsSystemUpgradeSWAction;
        OctetString     *stsSystemCurrentSWVersion;
        SR_INT32        stsSystemServiceState;
        SR_INT32        stsSystemWarmReset;
        SR_INT32        stsSystemColdReset;
        SR_INT32        stsSystemConfigReset;
        char            valid[4];
} stsSystem_t;


/*
 * The stsClockInput family. 
 */


typedef
struct _stsClockInput_t {
        SR_INT32        stsClockInputManualSelect;
        SR_INT32        stsClockInputOperMode;
        SR_INT32        stsClockInputProtectedPri;
        SR_INT32        stsClockInputSetSlip;
        SR_INT32        stsClockInputType;
        char            valid[1];
} stsClockInput_t;


/*
 * The stsClockInputSSM family. 
 */


typedef
struct _stsClockInputSSM_t {
        SR_INT32        stsClockInputSSMSelect;
        char            valid[1];
} stsClockInputSSM_t;


/*
 * The stsTop family. 
 */


typedef
struct _stsTop_t {
        SR_INT32        stsTopSourceIpOption;
        SR_UINT32       stsTopSourceIpAddress;
        SR_UINT32       stsTopSourceIpSubnetMask;
        SR_UINT32       stsTopSourceIpGatewayAddress;
        SR_INT32        stsTopPacketRate;
        SR_INT32        stsTopInputSelect;
        SR_INT32        stsTopTxPackets;
        SR_INT32        stsTopTxBytes;
        char            valid[2];
} stsTop_t;


/*
 * The stsClockInputStatusEntry family. 
 */


typedef
struct _stsClockInputStatusEntry_t {
        SR_INT32        stsClockInputStatusIndex;
        SR_INT32        stsClockInputState;
        char            valid[1];
} stsClockInputStatusEntry_t;


/*
 * The stsClockInputSSMEntry family. 
 */


typedef
struct _stsClockInputSSMEntry_t {
        SR_INT32        stsClockInputSSMIndex;
        SR_INT32        stsClockInputSSMType;
        SR_INT32        stsClockInputSSMValue;
        char            valid[1];
} stsClockInputSSMEntry_t;


/*
 * The stsCardEntry family. 
 */


typedef
struct _stsCardEntry_t {
        SR_INT32        stsCardShelf;
        SR_INT32        stsCardIndex;
        SR_INT32        stsCardType;
        OctetString     *stsCardDescr;
        OctetString     *stsCardSerial;
        OctetString     *stsCardHwVersion;
        OctetString     *stsCardCLEICode;
        SR_INT32        stsCardOperStatus;
        SR_INT32        stsCardReset;
        char            valid[2];
} stsCardEntry_t;


/*
 * The stsOscillatorEntry family. 
 */


typedef
struct _stsOscillatorEntry_t {
        SR_INT32        stsOscillatorIndex;
        SR_INT32        stsOscillatorModuleType;
        OctetString     *stsOscillatorEFER;
        OctetString     *stsOscillatorESSD;
        OctetString     *stsOscillatorESSN;
        OctetString     *stsOscillatorFAGE;
        OctetString     *stsOscillatorTIMD;
        SR_INT32        stsOscillatorSetActive;
        SR_INT32        stsOscillatorStatus;
        char            valid[2];
} stsOscillatorEntry_t;


/*
 * The stsGpsEntry family. 
 */


typedef
struct _stsGpsEntry_t {
        SR_INT32        stsGpsIndex;
        SR_INT32        stsGpsStatus;
        OctetString     *stsGpsANTD;
        OctetString     *stsGpsAZEL;
        OctetString     *stsGpsRSTG;
        OctetString     *stsGpsBITS;
        OctetString     *stsGpsPAVG;
        OctetString     *stsGpsSIGQ;
        OctetString     *stsGpsSPOS;
        OctetString     *stsGpsTRMO;
        OctetString     *stsGpsUTCT;
        OctetString     *stsGpsVERS;
        OctetString     *stsGpsDETF;
        OctetString     *stsGpsEFER;
        OctetString     *stsGpsESSD;
        OctetString     *stsGpsESSN;
        OctetString     *stsGpsFAGE;
        OctetString     *stsGpsTIMD;
        SR_INT32        stsGpsReset;
        char            valid[3];
} stsGpsEntry_t;


/*
 * The stsLinkEntry family. 
 */


typedef
struct _stsLinkEntry_t {
        SR_INT32        stsLinkIndex;
        SR_INT32        stsLinkType;
        SR_INT32        stsLinkEnable;
        SR_INT32        stsLinkLineCode;
        SR_INT32        stsLinkFMT;
        SR_INT32        stsLinkTermination;
        SR_INT32        stsLinkMFCHK;
        OctetString     *stsLinkId;
        char            valid[2];
} stsLinkEntry_t;


/*
 * The stsShelfEntry family. 
 */


typedef
struct _stsShelfEntry_t {
        SR_INT32        stsShelfIndex;
        OctetString     *stsShelfSerial;
        OctetString     *stsShelfCLEICode;
        SR_INT32        stsShelfReset;
        char            valid[1];
} stsShelfEntry_t;


/*
 * The stsAlarmThresholdEntry family. 
 */


typedef
struct _stsAlarmThresholdEntry_t {
        SR_INT32        stsAlarmThresholdCurrentMon;
        SR_INT32        stsAlarmThresholdType;
        SR_INT32        stsAlarmThresholdValue;
        SR_INT32        stsAlarmThresholdTimeInterval;
        char            valid[1];
} stsAlarmThresholdEntry_t;


/*
 * The stsLinkAlarmEntry family. 
 */


typedef
struct _stsLinkAlarmEntry_t {
        SR_INT32        stsLinkAlarmSettingLinkType;
        SR_INT32        stsLinkAlarmSettingType;
        SR_INT32        stsLinkAlarmSettingSevirity;
        SR_INT32        stsLinkAlarmSevirity;
        char            valid[1];
} stsLinkAlarmEntry_t;


/*
 * The stsOscillatorAlarmEntry family. 
 */


typedef
struct _stsOscillatorAlarmEntry_t {
        SR_INT32        stsOscillatorAlarmSettingClock;
        SR_INT32        stsOscillatorAlarmSettingType;
        SR_INT32        stsOscillatorAlarmSettingSeverity;
        SR_INT32        stsOscillatorAlarmSeverity;
        char            valid[1];
} stsOscillatorAlarmEntry_t;


/*
 * The stsOsPwrAlarmEntry family. 
 */


typedef
struct _stsOsPwrAlarmEntry_t {
        SR_INT32        stssPwrAlarmSettingShelf;
        SR_INT32        stsOsPwrAlarmSettingOsPwr;
        SR_INT32        stsOsPwrAlarmSettingSeverity;
        SR_INT32        stsOsPwrAlarmSeverity;
        char            valid[1];
} stsOsPwrAlarmEntry_t;


/*
 * The stsOutputAlarmEntry family. 
 */


typedef
struct _stsOutputAlarmEntry_t {
        SR_INT32        stsOutputAlarmSettingShelf;
        SR_INT32        stsOutputAlarmSettingSlot;
        SR_INT32        stsOutputAlarmSettingPort;
        SR_INT32        stsOutputAlarmSettingType;
        SR_INT32        stsOutputAlarmSettingSeverity;
        SR_INT32        stsOutputAlarmSeverity;
        char            valid[1];
} stsOutputAlarmEntry_t;


/*
 * The stsOutputTiuSettingEntry family. 
 */


typedef
struct _stsOutputTiuSettingEntry_t {
        SR_INT32        stsOutputTiuSettingShelf;
        SR_INT32        stsOutputTiuSettingSlot;
        SR_INT32        stsOutputTiuSettingPort;
        SR_INT32        stsOutputTiuSettingLineCoding;
        SR_INT32        stsOutputTiuSettingFMT;
        SR_INT32        stsOutputTiuSettingTermination;
        char            valid[1];
} stsOutputTiuSettingEntry_t;


/*
 * The stsPerfMonEntry family. 
 */


typedef
struct _stsPerfMonEntry_t {
        SR_INT32        stsPerfMonInputCurrentMon;
        SR_INT32        stsPerfMonInputMonPeriod;
        SR_INT32        stsPerfMonInputMonBucket;
        SR_INT32        stsPerfMonInputClockType;
        SR_INT32        stsPerfMonPerfCVL;
        SR_INT32        stsPerfMonPerfCVP;
        SR_INT32        stsPerfMonPerfCS;
        SR_INT32        stsPerfMonPerfESP;
        SR_INT32        stsPerfMonPerfJitter;
        OctetString     *stsPerfMonPerfPhaseData;
        SR_INT32        stsPerfMonPerfSESP;
        SR_INT32        stsPerfMonPerfTIE;
        SR_INT32        stsPerfMonPerfMTIE;
        SR_INT32        stsPerfMonPerfWDR5M;
        SR_INT32        stsPerfMonPerfWDR24H;
        char            valid[2];
} stsPerfMonEntry_t;


/*
 * The stsAlarmStatusEntry family. 
 */


typedef
struct _stsAlarmStatusEntry_t {
        SR_INT32        stsAlarmSource;
        SR_INT32        stsAlarmSourceType;
        SR_INT32        stsAlarmSeverity;
        SR_INT32        stsAlarmSrvEff;
        char            valid[1];
} stsAlarmStatusEntry_t;


/*
 * The stsOutputCardEntry family. 
 */


typedef
struct _stsOutputCardEntry_t {
        SR_INT32        stsOutputShelf;
        SR_INT32        stsOutputSlot;
        SR_INT32        stsOutputRedState;
        SR_INT32        stsOutputRedSwitchState;
        SR_INT32        stsOutputCRCCHK;
        SR_INT32        stsOutputCAS;
        SR_INT32        stsOutputSSM;
        SR_INT32        stsOutputSSMValue;
        OctetString     *stsOutputTimingFormat;
        char            valid[2];
} stsOutputCardEntry_t;


/*
 * The stsEmmStatusEntry family. 
 */


typedef
struct _stsEmmStatusEntry_t {
        SR_INT32        stsEmmShelf;
        SR_INT32        stsEmmUnitId;
        SR_INT32        stsEmmSensorType;
        SR_INT32        stsEmmAlarmStatus;
        SR_INT32        stsEmmSensorReading;
        SR_INT32        stsEmmMajorAlmHiThresh;
        SR_INT32        stsEmmMajorAlmLoThresh;
        SR_INT32        stsEmmMinorAlmHiThresh;
        SR_INT32        stsEmmMinorAlmLoThresh;
        char            valid[2];
} stsEmmStatusEntry_t;


/*
 * The stsAntEntry family. 
 */


typedef
struct _stsAntEntry_t {
        SR_INT32        stsAntIndex;
        SR_INT32        stsAntStatus;
        SR_INT32        stsAntSwitchState;
        char            valid[1];
} stsAntEntry_t;


/*
 * The stsTopDestEntry family. 
 */


typedef
struct _stsTopDestEntry_t {
        SR_INT32        stsTopDestNumber;
        SR_UINT32       stsTopDestIp;
        SR_INT32        stsTopDestUdpPort;
        SR_INT32        stsTopDestVlanId;
        char            valid[1];
} stsTopDestEntry_t;


/*
 * The stsTrapRegEntry family. 
 */


typedef
struct _stsTrapRegEntry_t {
        SR_INT32        stsTrapRegMgrNumber;
        SR_UINT32       stsTrapRegMgrIp;
        SR_INT32        stsTrapRegMgrUdpPort;
        OctetString     *stsTrapRegCommunityStr;
        SR_INT32        stsTrapRegState;
        char            valid[1];
} stsTrapRegEntry_t;


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_SNMPTYPE_H */
